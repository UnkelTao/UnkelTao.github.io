<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ACM | /UnkelTao]]></title>
  <link href="http://www.UnkelTao.com/blog/categories/acm/atom.xml" rel="self"/>
  <link href="http://www.UnkelTao.com/"/>
  <updated>2014-09-29T06:05:30+01:00</updated>
  <id>http://www.UnkelTao.com/</id>
  <author>
    <name><![CDATA[UnkelTao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[bestcode #11 div2]]></title>
    <link href="http://www.UnkelTao.com/blog/2014/09/29/bestcode-number-11-div2/"/>
    <updated>2014-09-29T04:54:35+01:00</updated>
    <id>http://www.UnkelTao.com/blog/2014/09/29/bestcode-number-11-div2</id>
    <content type="html"><![CDATA[<p>博客还是要不定期更新下才行，表示存活。<br />
~~昨天晚上做了杭电的best coder,div2果然还是比较适合我这种弱渣的，都可以做。最后1004出题人实在太恶意了，故意卡内存，MLE到死，1002坑死了一堆人，最后hack了6个（悲催的是自己想到数据了写错了一个字母，自己最后也挂掉了）。<br />
<strong>题解间下面:</strong><br />
<!-- more -->  </p>

<h3 id="httpacmhdueducnshowproblemphppid5054"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5054">1001</a></h3>
<p>签到题，没什么可说的，判断<code>2*x==n&amp;&amp;2*y==m</code>就行了  </p>

<p>```
int main(){
   //data();</p>

<p>int m,n,x,y;</p>

<p>while(~scanf(“%d%d%d%d”,&amp;n,&amp;m,&amp;x,&amp;y)){
      if(x<em>2==n&amp;&amp;y</em>2==m) cout«“YES”«endl;
      else cout«“NO”«endl;
   }
   return 0;
}
```  </p>

<h3 id="httpacmhdueducnshowproblemphppid5055"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5055">1002</a></h3>

<p><strong>题意:</strong> 给你一堆0~9的数字，让你把他们组合成一个满足条件的最大的数:  </p>

<ul>
  <li>木有前导0  </li>
  <li>最后一个必须是奇数  </li>
</ul>

<p>如果没有满足条件的，输出-1。
**解法:  ** 贪心，选一个最小的奇数放最后，然后从大到小输出剩余的数就行了，注意判断无解的情况。<br />
一些特殊数据  </p>

<blockquote>
  <p>5<br />
1 0 0 0 0<br />
out:-1<br />
1<br />
1<br />
out:1<br />
1<br />
0<br />
out:0  </p>
</blockquote>

<p>```
#define rep(i, n) for (int i=0; i&lt;(n); ++i)
void RD(int &amp;a) { 
    int value = 0, s = 1; 
    char c;
    while ((c = getchar()) == ‘ ‘ || c == ‘\n’);
    if (c == ‘-‘) s = -s; else value = c-48;
    while ((c = getchar()) &gt;= ‘0’ &amp;&amp; c &lt;= ‘9’)
        value = value * 10 + c - 48;
    a = s * value;
}
int res[10];
int main(){
   //data();</p>

<p>int n,a;
   while(~scanf(“%d”,&amp;n)){
      int fg=0,fg2=0,mi=11;
      memset(res,0,sizeof(res));
      rep(i,n){ 
         RD(a);
         if(a&amp;1){ fg++;if(mi&gt;a)mi=a;} 
         res[a]++; 
      }<br />
      if(fg==0||(n&gt;1&amp;&amp;res[0]==n-1)){printf(“-1\n”);}
      else{</p>

<pre><code>     for(int i=9;i&gt;=0;i--){
        if(i==mi) rep(j,res[i]-1)printf("%d",i);
        else rep(j,res[i]) printf("%d",i);
        
     }
     printf("%d\n",mi);
  }    }
</code></pre>

<p>return 0;
}
```  </p>

<h3 id="httpacmhdueducnshowproblemphppid5056"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5056">1003</a></h3>

<p>**题意： ** 给你一个只包含小写字母的字符串，问你相同字母不超过k个的子串有多少种。<br />
**解法:  ** 简单的dp吧对于某个i位置，找到该字母的第前k个相同字母的位置(不足k,就在起始位置)，同时维护前i-1的位置最远可以向前的位置。  </p>

<p>```
void RD(int &amp;a) { 
    int value = 0, s = 1; 
    char c;
    while ((c = getchar()) == ‘ ‘ || c == ‘\n’);
    if (c == ‘-‘) s = -s; else value = c-48;
    while ((c = getchar()) &gt;= ‘0’ &amp;&amp; c &lt;= ‘9’)
        value = value * 10 + c - 48;
    a = s * value;
}</p>

<p>int cnt[27];
vector<int> mark[26];
char str[100100];
int main(){
   //data();</int></p>

<p>int T,n,a,k;
   RD(T);</p>

<p>while(T–){
        for(int i=0;i&lt;26;i++){ mark[i].clear();cnt[i]=0;}        <br />
     scanf(“%s”,str);
     RD(k);
     int len=strlen(str);
     ll res=1LL;
     mark[str[0]-‘a’].push_back(0);
     cnt[str[0]-‘a’]++;
     int cur=-1;
     for(int i=1;i&lt;len;i++)
     {   int tp=str[i]-‘a’;</p>

<pre><code>     if(cnt[tp]&lt;k) res+=(i-cur);
     else{cur=max(cur,mark[tp][cnt[tp]-k]); res +=(i-cur);}
     //cout&lt;&lt;tp&lt;&lt;"  "&lt;&lt;cnt[tp]&lt;&lt;"  "&lt;&lt;k&lt;&lt;"   "&lt;&lt;res&lt;&lt;endl;
     cnt[tp]++;
     mark[tp].push_back(i);
 }
 cout&lt;&lt;res&lt;&lt;endl;    }
</code></pre>

<p>return 0;
}
```</p>

<h3 id="httpacmhdueducnshowproblemphppid5057"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5057">1004</a></h3>

<p><strong>题意:</strong> 给你一串数字，两种操作  </p>

<ul>
  <li>S x y: 将第x个数变为y  </li>
  <li>Q l r d p: 查询[l,r]区间内，第d位数字为p的数有多少个。  </li>
</ul>

<p>**解法: **一开始利用树状数组开了一个C[d][p][MaxN]的数组来维护第d位为p的一个区间和，结果出题人恶意的卡内存，不断的MLE，姿势不够，怎么优化内存都不行，有人说用无符号short型，但是n最大10^6，会溢出。最后改成离线算法，只开C[p][MaxN]的数组来维护某一位为p的区间和，然后预存所有操作，跑10遍，每一遍对应一位。这样内存就很随意了。 <br />
<img src="http://unkeltao.qiniudn.com/wailian%2Fhdudiv211.png" alt="" /><br />
都是泪~</p>

<p>```
#define MaxN 110000
int  C[11][MaxN]={0};
int n,n2,m;
int read(int k,int i){
    int sum=0;
    if(k&lt;=0) return 0;
    for(;k;k-=(k&amp;-k)) sum += C[i][k];
    return sum;
}</p>

<p>void update(int k,int p,int i){
    for(;k&lt;=n;k+=(k&amp;-k)) C[i][k] += p;
}
void RD(int &amp;a) { 
    int value = 0, s = 1; 
    char c;
    while ((c = getchar()) == ‘ ‘ || c == ‘\n’);
    if (c == ‘-‘) s = -s; else value = c-48;
    while ((c = getchar()) &gt;= ‘0’ &amp;&amp; c &lt;= ‘9’)
        value = value * 10 + c - 48;
    a = s * value;
}
int CC[MaxN],A[MaxN];
int p[11];
int T,i,j,a[MaxN],b[MaxN],l[MaxN],r[MaxN],cnt[MaxN],tp1,tp2;
int ans[MaxN];
int mx[11];
char Q[3];
int main(){
   // data();</p>

<pre><code>RD(T);
p[1]=1;
for(i=2;i&lt;=10;i++) p[i]=p[i-1]*10;
while(T--){
   RD(n);
   RD(m);        

   for(i=0;i&lt;n;i++){ 
        RD(A[i]);
        //cout&lt;&lt;A[i]&lt;&lt;endl;
   }
   for(int i=0;i&lt;11;i++)mx[i]=n;
   for(i=0;i&lt;m;i++){
      scanf("%s",Q);
         if(Q[0]=='S'){
         cnt[i]=0;
           RD(a[i]);RD(b[i]);
      }else{
           RD(l[i]);RD(r[i]);RD(a[i]);RD(b[i]);cnt[i]=1;
           mx[a[i]]=i;
      }
      
   }
   
   for(int i=1;i&lt;=10;i++)
   {
         memset(C,0,sizeof(C));
         for(j=0;j&lt;n;j++){
            n2 = (A[j]/p[i])%10;
            update(j+1,1,n2);
            CC[j]=A[j];
         }   
        for(int j=0;j&lt;m;j++){
           // if(j&gt;mx[i]) break;
            if(!cnt[j]) {
                tp1=(CC[a[j]-1]/p[i])%10;
                tp2=(b[j]/p[i])%10;
                if(tp1==tp2) continue;
               {update(a[j],-1,tp1); update(a[j],1,tp2);}
               CC[a[j]-1]=b[j];
            }else if(a[j]==i){
                ans[j] = read(r[j],b[j])-read(l[j]-1,b[j]);
            }
        }
   }
   
   for(i=0;i&lt;m;i++){
      if(cnt[i])  printf("%d\n",ans[i]);
   }                            
} } ```
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces Round #237 (Div. 2) ]]></title>
    <link href="http://www.UnkelTao.com/blog/2014/03/21/codeforces-round-number-237-div-2/"/>
    <updated>2014-03-21T04:03:13+01:00</updated>
    <id>http://www.UnkelTao.com/blog/2014/03/21/codeforces-round-number-237-div-2</id>
    <content type="html"><![CDATA[<p>群中看到学第们发的比赛链接，于是又做了一场，结果悲惨。再也不在windows下做比赛了，电脑现在不知道出了啥问题，每次00：16都要自动关机。结果敲完的题没保存，又得重新敲一遍。  </p>

<h3 id="a---valera-and-xhttpcodeforcescomcontest404problema"><a href="http://codeforces.com/contest/404/problem/A">A - Valera and X</a></h3>
<p><strong>题意</strong>： 给你一个矩阵，问你是不是恰好有2种字母，对角线字母一样，非对角线字母一样。<br />
<strong>key</strong>:   模拟  </p>

<!--more-->

<p>```ruby</p>

<p>n = gets.chomp!.to_i
a = Array.new(n) </p>

<p>n.times{|i|
    a[i] = gets.chomp!
}</p>

<p>if n==1
    puts “YES”
    exit
end</p>

<p>x = a[0][0]
b = a[0][1]</p>

<p>if x == b
    puts “NO”
    exit
end<br />
n.times { |i|<br />
    n.times { |j|<br />
        if i==j || (i+j==n-1)
            if a[i][j] != x
                puts “NO”
                exit
            end
        else
             if a[i][j] != b
                puts “NO”
                exit
            end
        end
    }
}</p>

<p>puts “YES”</p>

<p>```</p>

<h2 id="b---marathonhttpcodeforcescomcontest404problemb"><a href="http://codeforces.com/contest/404/problem/B">B - Marathon</a></h2>
<p><strong>题意</strong>:  给你一个a*a的正方形，从(0,0)出发，沿边线逆时针行走，走n次，每次走d的距离，输出每次行走后的坐标。</p>

<p><strong>key</strong>:   模拟题，注意精度就好。</p>

<p>```ruby<br />
eps = 1e-5
a,d = gets.chomp!.split.map { |e|  e.to_f}
n =gets.chomp!.to_i
cur_x=0.00
cur_y=0.00
pp=0.00</p>

<p>n.times {
	if cur_y &lt;= eps
		pp = cur_x	
	elsif a-cur_x &lt;= eps
		pp = a + cur_y
	elsif a-cur_y &lt;= eps
		pp = a<em>3 -cur_x	
	else
		pp = a</em>4 -cur_y
	end	
	pp +=d;
	t= (pp/a).floor
	pp -= 1.0<em>t</em>a;
	case t%4
	when 0
		cur_x=pp
		cur_y=0
	when 1
		cur_x=a
		cur_y=pp
	when 2
		cur_x=a-pp
		cur_y=a
	when 3
		cur_x=0
		cur_y=a-pp
	end
	printf(“%.8f %.8f\n”,cur_x,cur_y)
}
```  </p>

<h2 id="c---restore-graphhttpcodeforcescomcontest404problemc"><a href="http://codeforces.com/contest/404/problem/C">C - Restore Graph</a></h2>
<p><strong>题意</strong>:  给你一个无向无子环的图，告诉你所有点到某一个选取的点的距离的矩阵d,问你能不能修复出满足条件的原图，其中一个点最多能够连接k条边。</p>

<p><strong>key</strong>:  首先d中肯定只有一个0，并且该点就是选取的点。否则肯定不存在。 对d进行排序，一条边一条边的修复模拟即可，注意满足每个点连接的边不能超过k个。 </p>

<p>```ruby</p>

<table>
  <tbody>
    <tr>
      <td>n,k = gets.chomp!.split.map {</td>
      <td>e</td>
      <td>e.to_i}</td>
    </tr>
  </tbody>
</table>

<p>D = gets.chomp!.split.map {|e| [e.to_i,0]}
flag = 0
n.times { |i| 
    D[i][1]=i+1
    if D[i][0] == 0
        flag += 1
    end
}
if flag != 1
    p -1
    exit
end</p>

<p>D.sort!
b = Array.new(2<em>n)
e = Array.new(2</em>n)
l=0
f=0
t=1
while t&lt;n 
    if f==1 
        k -= 1 
    end
    if D[t].first!= (D[f].first+1) 
        puts “-1” 
        exit 
    end
    p=k
    i = t
    while i&lt;n
        break if D[i].first!=D[t].first
        if(p==0) 
            f +=1
            p=k 
        end
        if(p==0)<br />
            puts(“-1”) 
            exit 
        end
        p -= 1
        if(f==t)<br />
            puts(“-1”) 
            exit 
        end
        b[l]=D[f][1];
        e[l]=D[i][1];
        l+=1;i+=1;
    end
    f=t;
    t=i;
end</p>

<p>p l
l.times { |i|<br />
    puts “#{b[i]} #{e[i]}”
}
```  </p>

<h2 id="d---minesweeper-1dhttpcodeforcescomcontest404problemd"><a href="http://codeforces.com/contest/404/problem/D">D - Minesweeper 1D</a></h2>
<p><strong>题意</strong>: 给你一个1<em>n的地雷图，0表示左右都没有地雷，1表示左右共有1个雷，2表示左右都是雷，</em>表示该点是雷，？表示该点未知，求有多少种合法的方案。  </p>

<p><strong>key</strong>: DP,<code>dp[i][0]表示i点是0的方案数，dp[i][1]表示i点是1的方案数，dp[i][2]表示该点是雷的方案数</code>，其中1可以转化为0，2可以转化为1。 因为“<em>1”的话后面肯定不会是雷，那么变成0的方案数，如果是”01”或“11”的话，后面肯定是雷，保持1不动，”</em>2”的话后面肯定是雷。<br />
<strong>转移方程见代码</strong>  </p>

<p>```ruby 
s = gets.chomp!
mods = 1000000007
dp = [[0,0,0],[0,0,0]]</p>

<p>len =s.size
cur =0;nxt=1;</p>

<p>dp[cur][0]=dp[cur][1]=1</p>

<p>for i in 0…len
	case s[i]
	when ‘0’
		dp[nxt][0]=dp[cur][0]
	when ‘1’
		dp[nxt][1]= dp[cur][0]
		dp[nxt][0]= dp[cur][2]
	when ‘2’
		dp[nxt][1]=dp[cur][2]
	when ‘*’
		dp[nxt][2]= (dp[cur][1]+dp[cur][2])%mods
	when ‘?’
		dp[nxt][1]= (dp[cur][2]+dp[cur][0])%mods
		dp[nxt][0]= (dp[cur][0]+dp[cur][2])%mods
		dp[nxt][2]= (dp[cur][1]+dp[cur][2])%mods
	end
	cur = nxt
	nxt = cur==0?1:0
	dp[nxt] = [0,0,0]
end</p>

<p>puts “#{(dp[cur][0]+dp[cur][2])%mods}” 
```  </p>

<h2 id="e---maze-1dhttpcodeforcescomcontest404probleme"><a href="http://codeforces.com/contest/404/problem/E">E - Maze 1D</a></h2>
<p><strong>题意</strong>: 题意真是难读,大概就是机器人会左右移动，但是如果前面的点是障碍点的话他就不会向前进忽略这次移动，问在设置最少障碍点的情况下能够使得机器人最后停下的位置是以前没有走过的。 问这样的设置方案数有多少个（在障碍点最少的情况下）。</p>

<p><strong>key</strong>: 二分+枚举。   </p>

<ul>
  <li>首先我们可以确定，如果不加障碍点他最后停留的位置只走过一次的话，那么方案数肯定是1。   </li>
  <li>最多设置一个障碍点，如果一个障碍点不能满足情况，再多的障碍点也没用。  </li>
  <li>如果i点可以是障碍点，那么<code>(0,i]</code>的点都可以是障碍点，同理-i是障碍点，<code>[-1,0)</code>都可以是障碍点。  </li>
</ul>

<p>有了这样的理解，那么遍可以2分来判断最大的i点是不是可以为障碍点了，判断方法模拟就可以了。<br />
<strong>(ruby跑的太慢，TLE了，囧RZ，C++可以AC)</strong>  </p>

<p><strong>ruby代码</strong></p>

<p>```ruby
#TLE 代码
$s = gets.chomp!
$fg = 2
$len = $s.size
$mods = $len+7
$vis = Array.new((5*$mods))
def Judge(k)</p>

<pre><code>$fg += 1
pos = $mods + 100
k += pos
$vis[pos] = $fg
$len.times { |i|  
	if $s[i].chr=='R' and pos+1 !=k
		pos += 1
		# p 111111111111
	elsif $s[i].chr=='L' and pos-1 != k
		pos -= 1
		# p 222222222222
	end
	if i==$len-1
		# puts "b:"
		# p $vis[pos]
		# p pos 
		# p $fg
		return $vis[pos] != $fg
	end
	$vis[pos] = $fg
} end
</code></pre>

<p>if Judge($mods+300)
	p 1
	exit
end</p>

<p>res = 0
l = 1
r=$len</p>

<p>if Judge(1)
	while l&lt;r
		mid = ((l+r+1)/2).floor
		if Judge(mid)
			l = mid
		else
			r =mid -1
		end
	end
	res += l
end</p>

<p>l = 1
r=$len</p>

<p>if Judge(-1)
	while l&lt;r
		mid = (l+r+1)/2
		if Judge(-1*mid)
			l = mid
		else
			r =mid -1
		end
	end
	res += l
end</p>

<p>p res
```</p>

<p><strong>c++代码</strong>  </p>

<p>```c++
char str[MaxN];
int fg=2,len;
int vis[5*MaxN];</p>

<p>bool Judge(int k){
   fg++;
   int pos=1e6+10;
   k+=pos;
   vis[pos] = fg;
   // printf(“%d %d %d\n”, fg,pos,k);
   rep(i,len){
   	  if(str[i]==’R’&amp;&amp;pos+1!=k) pos++;
   	  if(str[i]==’L’&amp;&amp;pos-1!=k) pos–;
   	  if(i==len-1){
   	  	// printf(“ans %d  %d %d\n”, vis[pos],fg,pos);
   	  	return vis[pos] != fg;
   	  }
   	  vis[pos] = fg;
   }	
}</p>

<p>int main()
{
	while(~scanf(“%s”,str)){
		len = strlen(str);
		memset(vis,0,sizeof(vis));</p>

<pre><code>	if(Judge(1e6+200)){
		printf("1\n");
		return 0;
	}

	ll res = 0;
	int l=1,r=len,mid;
	if (Judge(1))
	{
		while(l&lt;r){
			mid = (l+r+1)/2;
			if(Judge(mid)) l=mid;
			else r=mid-1;
		}
		res += l;
	}

	if (Judge(-1))
	{
		l=1,r=len,mid;
		while(l&lt;r){
			mid = (l+r+1)/2;
			if(Judge(-mid)) l=mid;
			else r=mid-1;
		}
		res += l;			
	}
	cout&lt;&lt;res&lt;&lt;endl;
}	
return 0; }
</code></pre>

<p>```</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces Round #235 (Div. 2) ]]></title>
    <link href="http://www.UnkelTao.com/blog/2014/03/11/codeforce-235/"/>
    <updated>2014-03-11T07:02:19+01:00</updated>
    <id>http://www.UnkelTao.com/blog/2014/03/11/codeforce-235</id>
    <content type="html"><![CDATA[<p>好久没做CF了，觉得再不做估计以后笔试都过不鸟，于是还得经常做一做。 </p>

<p>CF的回滚对我木有影响阿，我已经好久没做了似乎。 </p>

<p>这次的DIV2似乎比以前的简单一点。 </p>

<h2 id="a-vanya-and-cardshttpcodeforcescomcontest401problema"><a href="http://codeforces.com/contest/401/problem/A">A. Vanya and Cards</a></h2>
<p>送分,大概给你一堆数，问你最少还需要几个绝对值不超过X的数能够让他们的和为0.</p>

<p><code>ruby
n,x = gets.chomp!.split.map { |e|  e.to_i}
sum = gets.split.collect{|x| x.to_i}.inject{|y, x| y += x}
p (sum.abs + x -1)/x
</code>
<!--more--></p>

<h2 id="b-sereja-and-contestshttpcodeforcescomcontest401problemb"><a href="http://codeforces.com/contest/401/problem/B">B. Sereja and Contests</a></h2>
<p>模拟题</p>

<p>```ruby
n,k = gets.chomp!.split.map { |e|  e.to_i}
A = Array.new(n) { |i|  0}
k.times {<br />
   c,d1,d2 =  gets.chomp!.split.map { |e|  e.to_i}
   A[d1-1] = 1
   if d2 != nil
     A[d2-1] = 1
   end
}</p>

<p>mx=0
mi=0
cur=0
(n-1).times do |i|
   if A[i] == 0
        cur += 1
   else
       mx += cur
       mi += (cur+1)/2
       cur = 0<br />
   end<br />
end</p>

<p>mx += cur
mi += (cur+1)/2
puts “#{mi} #{mx}”
```</p>

<h2 id="c-teamhttpcodeforcescomcontest401problemc"><a href="http://codeforces.com/contest/401/problem/C">C. Team</a></h2>
<p>也是模拟题，给你n个1，m个0，让你给出一种排列，不能有3个1连在一起，不能有两个0连在一起，给出任意一种方案即可，不能则输出-1</p>

<p>```ruby
m,n = gets.chomp!.split.map { |e|  e.to_i}
if n+1 &lt; m 
    p -1
    exit
elsif (m+1)*2 &lt; n
    p -1
    exit
end</p>

<p>if n == m
    n.times{printf “10” }
    puts “”
elsif m == n+1
    n.times{print “01”}
    puts 0
elsif (m+1)<em>2 == n
    m.times{printf “110”}
    puts “11”
elsif m</em>2 == n
    m.times{print “110”}
    puts “”
else
    k = n - 1 - m
    (k).times {print “110”}
    (m-k).times{print “10”}
    puts “1”
end
```</p>

<h2 id="d-roman-and-numbershttpcodeforcescomcontest401problemd"><a href="http://codeforces.com/contest/401/problem/D">D. Roman and Numbers</a></h2>
<p>暴力+状态压缩。 
题意：给你一个不超过18位的数n,和不超过100的m,将n进行重排(改变里面的位置，当然0不能排在最前面)，问有多少个数是m的倍数。 
ruby似乎跑的很慢，不幸TLE的，C++可以过 </p>

<p>```ruby
n,m = gets.chomp!.split
m = m.to_i
len = n.size
dp = Array.new((1«len)+2) {Array.new(m+5,0)} 
dp[0][0] = 1</p>

<p>(1«len).times do |i|
    m.times { |j|<br />
        tp = Array.new(20,0)
        len.times{|k|
            t = n[k].chr.to_i
            if i&amp;(1«k) != 0 || (i==0 &amp;&amp; t==0) || tp[t] !=0 
                next
            end
            tp[t] = 1
            dp[i|(1«k)][(j*10+t)%m] +=dp[i][j]
        } <br />
    }
end
p dp[(1«len)-1][0]
``` </p>

<h2 id="e-olympic-gameshttpcodeforcescomcontest401probleme"><a href="http://codeforces.com/contest/401/problem/E">E. Olympic Games</a></h2>
<p>略难，暂时不会</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为Hustoj添加ruby支持]]></title>
    <link href="http://www.UnkelTao.com/blog/2014/03/02/ruby-for-hustoj/"/>
    <updated>2014-03-02T14:33:16+00:00</updated>
    <id>http://www.UnkelTao.com/blog/2014/03/02/ruby-for-hustoj</id>
    <content type="html"><![CDATA[<p>虽然已经不是再搞ACM了，但是算法偶尔还是要练习一下写代码，然后最近学习ruby中，打算用ruby来写写ACM题目也算熟悉ruby，免得不用就忘记了，记得Hustoj是可以支持Ruby的，于是就在我们学校的训练Oj上提交了A+B的Ruby代码：</p>

<p><code>ruby
readlines.each{|line|
	p line.split.collect{|x| x.to_i}.inject{|y, x| y += x}
}
</code></p>

<p>于是华丽的给了我一个WA~~~正在想怎么可能，想起来服务器上没有装ruby，于是远程到7509的服务器上再ssh到训练oj的服务器(只能内网访问，ping不到外网地址)，将ruby装上。</p>

<p>然后就开始了无止境的RE生涯，简直无情，各种call禁止：
<!--more-->
<img src="http://unkeltao.qiniudn.com/img/IMG_ruby_1.png" alt="" /></p>

<p>在hustoj的wiki页面上，终于找到了参考的添加其他<a href="http://code.google.com/p/hustoj/wiki/AddProgrammingLanguage">语言支持的方法</a></p>

<p>其实主要的就是找到所有的call编号，放到数组里面去就行了，ruby对应了两个数组</p>

<p><code>rb
#保存为Main.rb
readlines.each{|line|
	p line.split.collect{|x| x.to_i}.inject{|y, x| y += x}
</code></p>

<p>terminal中运行如下命令。</p>

<p><code>sh
strace -ff ruby Main.rb 2&gt;&amp;1|awk -F\( '{print $1}'|sort -u
</code></p>

<p>然后会产生,以access开头，write结束（也有可能是其他）的一些列标志如下：</p>

<p><code>
access
xxx
xxx
write
</code></p>

<p>把这些标志放入如下过程，结尾是0，对应RC数组其他值为-1，结尾为0.</p>

<p><code>c++
int LANG_RV[256]={SYS_access,SYS_write.....,0};
int LANG_RC[256]={-1,-1,......,0};
</code></p>

<p>改好之后切换到对应目录下，重新make</p>

<p><code>sh
cd ~/hustoj-read-only/core/
./make.sh
</code></p>

<p>接下来就是体力活了，找到提交的runid，rejudge下，看看是不是AC了，可能还会接着RE，如果RE，就将新的callid(是一个数字)加入到数组中，也就是RV数组中，RC数组值为-1就行：</p>

<p><code>sh
sudo judge_client 2028 0 /home/judge/ debug Y
</code></p>

<p>直到返回值不是10，然后再去页面提交，这下应该就可以了~~~（当然我中间还做了一堆傻事，这儿就不提了）
偶尔可以在训练oj上做做练习了，免得以后笔试说不定都跪。</p>

<p>最终结果：
<img src="http://unkeltao.qiniudn.com/img/IMG_ruby_2.png" alt="" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MemSQL start]]></title>
    <link href="http://www.UnkelTao.com/blog/2013/08/04/memsql-start/"/>
    <updated>2013-08-04T13:13:34+01:00</updated>
    <id>http://www.UnkelTao.com/blog/2013/08/04/memsql-start</id>
    <content type="html"><![CDATA[<p>【测试代码】</p>

<p>昨晚的CF略晚~~而且提示说div2的少年们，你们很可能会爆0~~~</p>

<p>于是赤裸裸的去了，然后悲催的爆0了</p>

<p>只看了A、B两题~~A题觉得挺简单的，敲了个2分交上去过了Pass，想了想B觉得没有想法就睡觉了。。。
<!--more-->
早上一起洗个澡吃完早餐一看~~WA了~~然后看了下代码，我去，尼玛有一行特判输出没改，直接注释掉没用的特判就过了</p>

<p>说说A题吧，题意大概是一串字符串，求一个长度为k的子串，是的用最少的该子串来构成源串，你可以使用子串的其中任意个字符按照你想要的方式排序拼接,输出需要的最少个数和该k子串。</p>

<p>解法：数据那么弱，统计下源串每个字母的个数，直接暴力匹配从1个到(n+k-1)/k个能否拼成源串就好,写的2分,也过了.</p>

<p><code>c++ 
#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;cstring&gt;
#include &lt;cmath&gt;
#include &lt;climits&gt;
#include &lt;cctype&gt;
#include &lt;ctime&gt;
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;queue&gt;
#include &lt;vector&gt;
#include &lt;set&gt;
#include &lt;map&gt;
#include &lt;stack&gt;
#define SQR(x) ((x)*(x))
#define rep(i, n) for (int i=0; i&lt;(n); ++i)
#define repd(i,n)  for(int i=1;i&lt;=(n);++i)
#define repf(i, a, b) for (int i=(a); i&lt;=(b); ++i)
#define reps(i, a, b) for (int i=(a); i&gt;=(b); --i)
#define PB push_back
#define MP(A, B) make_pair(A, B)
#define pow2(n) (1&lt;&lt;(n))
#define pi acos(-1)
#define eps 0.00000001
#define lg(n) log10((n)*1.0)
#define MaxN  1000000
#define mod 10e+7
#define ll long long
#define typed int
using namespace std;
void data(){
   freopen("data.in","r",stdin);
   freopen("data.out","w",stdout);
}
char s[1100];
int su[27];
int k;
int jd(int n){
   int cnt=0;
   rep(i,26){
       cnt+=(su[i]+n-1)/n;
   } 
   if(cnt&lt;=k) return 1;
   else return 0;
}
void pt(int n){
 //  cout&lt;&lt;"pt"&lt;&lt;endl;   
   cout&lt;&lt;n&lt;&lt;endl;    
   string ss="";
   int cnt=0;
   rep(i,26){
      rep(j,(su[i]+n-1)/n){ ss+=(i+'a');cnt++;}
   }
   cout&lt;&lt;ss;
   rep(i,k-cnt)cout&lt;&lt;'a';
   cout&lt;&lt;endl;
}
void bit(int l,int r){
     while(l&lt;r){
     int mid=(l+r)/2;
     int kk=jd(mid);
       if(kk&gt;0) r=mid;
       else l=mid+1;    
     }
     pt(l);
}
 
int main(){
   while(cin&gt;&gt;s&gt;&gt;k){
     rep(i,26) su[i]=0;
     rep(i,strlen(s))su[s[i]-'a']++;
     int ma=0,cnt=0;
     rep(i,26)if(su[i]){cnt++;ma=max(ma,su[i]);}
     if(k&lt;cnt)cout&lt;&lt;-1&lt;&lt;endl;
     else{
       
         
        //bit((strlen(s)+k-1)/k,ma+1); //2分 
        repd(i,strlen(s)){   //暴力 
           if(jd(i)){pt(i);break;}
        }
     } 
   }        
   return 0;
}
</code></p>

<p>B题一看最长回文子序列，能想到的方法就是2维DP出LCS~~可是源串长度为50000，2维DP肯定挂~~早上起来，顺带看了一眼，发现一个条件，回文最长为100（大于100输出100的就行）,这个想了下，就好搞了.一共26字母，说明在2600个字母序列里面肯定会产生回文长度至少是100的。。</p>

<p>这样超过长度2600的就可以直接DP前2600个字母就行了~~~然后就是模板题了~~~真是弱爆了~~</p>

<p><code>c++ 
#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;cstring&gt;
#include &lt;cmath&gt;
#include &lt;climits&gt;
#include &lt;cctype&gt;
#include &lt;ctime&gt;
 
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;queue&gt;
#include &lt;vector&gt;
#include &lt;set&gt;
#include &lt;map&gt;
#include &lt;stack&gt;
 
#define SQR(x) ((x)*(x))
#define rep(i, n) for (int i=0; i&lt;(n); ++i)
#define repd(i,n)  for(int i=1;i&lt;=(n);++i)
#define repf(i, a, b) for (int i=(a); i&lt;=(b); ++i)
#define reps(i, a, b) for (int i=(a); i&gt;=(b); --i)
#define PB push_back
#define MP(A, B) make_pair(A, B)
#define pow2(n) (1&lt;&lt;(n))
#define pi acos(-1)
#define eps 0.00000001
#define lg(n) log10((n)*1.0)
#define MaxN  50000
#define mod 10e+7
#define ll long long
#define typed int
using namespace std;
void data(){
   freopen("data.in","r",stdin);
   freopen("data.out","w",stdout);
}
int dp[2620][2620];
char c[MaxN+100],a[2620],b[2620];
int k[2620][2620];
int cnt[27];
void LCS(int len){
     int i, j;
      rep(i,len+1){ dp[i][0]=dp[0][i]=0;}
      repd(i,len)
        repd(j,len)
        {
            if(a[i]==b[j]){
                k[i][j]=0;
                dp[i][j]=1+dp[i-1][j-1];  
            }
            else if(dp[i-1][j]&gt;=dp[i][j-1]){
                k[i][j]=1;
                dp[i][j]=dp[i-1][j]; 
            }
            else{
                 k[i][j]=-1;
                 dp[i][j]=dp[i][j-1];
            }         
        } 
}
char st[2610];
int num;
void pt(int m,int n){
   if(n==0||m==0) return ;
   if(k[m][n]==0){
     pt(m-1,n-1);
     st[num++]=a[m];
   }
   else if(k[m][n]&gt;0) pt(m-1,n);
   else pt(m,n-1);  
}
int main(){
    //data();
    while(~scanf("%s",c+1)){                            
     int len=strlen(c+1);
     num=0;
     bool fg=1;
     repd(i,len){
         cnt1-'a']++;
         if(cnt1-'a']&gt;=100){
           rep(j,100)cout&lt;&lt;c[i];
           cout&lt;&lt;endl;fg=0;break;
         }
     }
     if(!fg)continue;
     if(len&gt;2602) len=2602;
     repd(i,len){a[i]=c[i];b[len+1-i]=c[i];}
     LCS(len);
     pt(len,len);
     if(num&lt;=100)printf("%s\n",st);
     else{
       rep(i,50)cout&lt;&lt;st[i];reps(i,49,0)cout&lt;&lt;st[i]; cout&lt;&lt;endl;  
     }
     
    }           
   return 0;
}
</code></p>

<p>（效果似乎一般）</p>

]]></content>
  </entry>
  
</feed>
