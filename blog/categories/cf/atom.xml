<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CF | /UnkelTao]]></title>
  <link href="http://www.UnkelTao.com/blog/categories/cf/atom.xml" rel="self"/>
  <link href="http://www.UnkelTao.com/"/>
  <updated>2014-03-24T11:22:37+08:00</updated>
  <id>http://www.UnkelTao.com/</id>
  <author>
    <name><![CDATA[UnkelTao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Codeforces #238 (Div.1 AB)]]></title>
    <link href="http://www.UnkelTao.com/blog/2014/03/23/codeforces-round-number-238-div-dot-1-a/"/>
    <updated>2014-03-23T19:51:37+08:00</updated>
    <id>http://www.UnkelTao.com/blog/2014/03/23/codeforces-round-number-238-div-dot-1-a</id>
    <content type="html"><![CDATA[<p>rating 居然涨了，简直不科学。 <br/>
<a href="http://codeforces.com/profile/UnkelTao">弱弱的求个关注:http://codeforces.com/profile/UnkelTao</a></p>

<h2><a href="http://codeforces.com/contest/406/problem/A">A. Unusual Product</a></h2>

<p><strong>题意</strong>: 给你一个矩阵，定义了unusual值，类似与矩阵乘法，但是做的与，对应所有Aij&amp;Aji的值再异或，然后你可以对矩阵的一行或者一列进行反转（0变1，1变0）查询则输出Unusual值。<br/>
<strong>key</strong>: 我们可以发现，Unusual值其实就是主对角线的值进行异或，跟周围的元素完全没有关系，因为： Aij&amp;Aji,但是Aji又会与Aij，这样等于 <code>（Aij&amp;Aji）^（Aji&amp;Aij）=0 (i!=j)</code>,那么操作一次，结果便会由0变1或者由1变0，不管怎么操作。</p>

<!--more-->


<p>```c++</p>

<h1>include <cstdio></h1>

<h1>include <iostream></h1>

<h1>define rep(i, n) for (int i=0; i&lt;(n); ++i)</h1>

<p>using namespace std;
void data(){
   freopen(&ldquo;data.in&rdquo;,&ldquo;r&rdquo;,stdin);
   freopen(&ldquo;data.out&rdquo;,&ldquo;w&rdquo;,stdout);
}
int a[1002][1002],n;
int main(){</p>

<pre><code>//data();
</code></pre>

<p>   scanf(&ldquo;%d&rdquo;,&amp;n);
   rep(i,n)rep(j,n) scanf(&ldquo;%d&rdquo;,&amp;a[i][j]);
   int ans=0;
   for(int i=0;i&lt;n;i++)
   for(int j=0;j&lt;n;j++)
   ans+=a[i][j]*a[j][i];</p>

<p>   ans%=2;
   int m;
   scanf(&ldquo;%d&rdquo;,&amp;m);
   rep(i,m){</p>

<pre><code>  int a,b;
     scanf("%d",&amp;a);
     if(a==3) printf("%d",ans);
     else {scanf("%d",&amp;b); ans=1-ans;}      
</code></pre>

<p>   }
   printf(&ldquo;\n&rdquo;);</p>

<p>   return 0;
}
```</p>

<h2><a href="http://codeforces.com/contest/406/problem/B">B. Toy Sum</a></h2>

<p><strong>题意</strong>: 给你1，2&hellip;10<sup>6</sup>个数，从中已经选出了其中的n个作为X，让你再挑选出m个作为另外一组Y，要求满足题目给出的公式。<br/>
<strong>key</strong>:  我们稍微观察一下公式就会发现，  <code>a- 1 == s-(s+1-a)</code> ; 这样，我们就可以贪心了，如果X中选了a,那么看(s+1-a)被选没，没北选，那么我们便把(s+1-a)选入Y，如果选了，那么我们相当于X得了个s,我们便寻找一组都没被选入X的b和（s+1-b）,肯定可以找到的，因为<code>n&lt;=10<sup>5</sup>&lt;=s/2</code>; 这样便可以得出一个可行解。</p>

<p>```c++</p>

<h1>include <cstdio></h1>

<h1>include <cstdlib></h1>

<h1>include <cstring></h1>

<h1>include <cmath></h1>

<h1>include <climits></h1>

<h1>include <cctype></h1>

<h1>include <ctime></h1>

<h1>include <algorithm></h1>

<h1>include <iostream></h1>

<h1>include <queue></h1>

<h1>include <vector></h1>

<h1>include <set></h1>

<h1>include <map></h1>

<h1>include <stack></h1>

<h1>define SQR(x) ((x)*(x))</h1>

<h1>define rep(i, n) for (int i=0; i&lt;(n); ++i)</h1>

<h1>define repd(i,n)  for(int i=1;i&lt;=(n);++i)</h1>

<h1>define repf(i, a, b) for (int i=(a); i&lt;=(b); ++i)</h1>

<h1>define reps(i, a, b) for (int i=(a); i>=(b); &mdash;i)</h1>

<h1>define PB push_back</h1>

<h1>define MP(A, B) make_pair(A, B)</h1>

<h1>define pow2(n) (1&lt;&lt;(n))</h1>

<h1>define pi acos(-1)</h1>

<h1>define eps 0.00000001</h1>

<h1>define lg(n) log10((n)*1.0)</h1>

<h1>define MaxN  1000000</h1>

<h1>define mod 1000000007</h1>

<h1>define mod2 1000000009</h1>

<h1>define mod3 1000007</h1>

<h1>define md(x) (((x)%mod+mod)%mod)</h1>

<h1>define inf 2147483647</h1>

<h1>define inf2 0x7fffffffffffffff</h1>

<h1>define ll long long</h1>

<h1>define typed int</h1>

<p>using namespace std;
void data(){
   freopen(&ldquo;data.in&rdquo;,&ldquo;r&rdquo;,stdin);
   freopen(&ldquo;data.out&rdquo;,&ldquo;w&rdquo;,stdout);
}
int kk=1000001;
int a[1000002],n;
int t[1000002],t2[1000002];
int ans[1000002],m=0;
int main(){
   // data();
   memset(a,0,sizeof(a));
   memset(t2,0,sizeof(t2));
   scanf(&ldquo;%d&rdquo;,&amp;n);</p>

<p>   rep(i,n){scanf(&ldquo;%d&rdquo;,&amp;t[i]);a[t[i]]=1;}</p>

<p>   int tp=0;
   rep(i,n){</p>

<pre><code>  if(a[kk-t[i]]) tp++;
  else{
      if(!t2[kk-t[i]]) ans[m++]=kk-t[i];
      t2[t[i]]=1;
      t2[kk-t[i]]=1;
  }  
</code></pre>

<p>   }
   tp/=2;
   for(int i=1;i&lt;kk/2+1;i++){</p>

<pre><code>  if(!tp)break;
  if(!a[i]&amp;&amp;!a[kk-i]){ans[m++]=i;ans[m++]=kk-i;tp--;}          
</code></pre>

<p>   }</p>

<p>   printf(&ldquo;%d\n&rdquo;,m);
   printf(&ldquo;%d&rdquo;,ans[0]);
   for(int i=1;i&lt;m;i++)</p>

<pre><code>  printf(" %d",ans[i]);
</code></pre>

<p>   printf(&ldquo;\n&rdquo;);</p>

<p>   return 0;
}
```</p>

<h3>C,D,E实在做不动了。</h3>

<p>PS，顺带写下今天群内学第们训练的题，我是太闲了么。。。囧</p>

<h2><a href="http://acm.hust.edu.cn/vjudge/contest/view.action?cid=42652#problem/E">E Matrix</a></h2>

<p><strong>题意</strong>:  给你一个数字字符串，构造一个2维的矩阵，bij = si<em>sj; 给你一个范围x,y,z,t,让所有x=&lt;i&lt;=y, z=&lt;j&lt;=t 的bij的和等于a的这样的Group有多少个。 <br/>
<strong>key</strong>:  我们不难发现，其实所有区间的和其实可以转化为 <code>(Sx+S(x+1)&hellip;Sy)</em>(Xz+&hellip;+St)</code>（展开就能就是b了），那么相当于我们求的是连续的一段的和，和另外连续的一段的和的乘积等于a的个数，那么我们可以用O(n<sup>2</sup>)的算法枚举出所有连续子段和,并记录没种可能的个数。</p>

<ul>
<li>a=0, 那么判断有多少个连续字段和等于0的，<code> res = cnt[0]*cnt[0] + 2*cnt[0]*cnt[i](cnt[i] != 0)</code></li>
<li>a!=0,那么我们就可以分解a为两个数的乘积， <code>res = cnt[c]*cnt[d]*2(c*d==a) (若c==d不乘以2)</code></li>
</ul>


<p>```c++</p>

<h1>include <cstdio></h1>

<h1>include <cstdlib></h1>

<h1>include <cstring></h1>

<h1>include <cmath></h1>

<h1>include <climits></h1>

<h1>include <cctype></h1>

<h1>include <ctime></h1>

<h1>include <algorithm></h1>

<h1>include <iostream></h1>

<h1>include <queue></h1>

<h1>include <vector></h1>

<h1>include <set></h1>

<h1>include <map></h1>

<h1>include <stack></h1>

<h1>define SQR(x) ((x)*(x))</h1>

<h1>define rep(i, n) for (int i=0; i&lt;(n); ++i)</h1>

<h1>define repd(i,n)  for(int i=1;i&lt;=(n);++i)</h1>

<h1>define repf(i, a, b) for (int i=(a); i&lt;=(b); ++i)</h1>

<h1>define reps(i, a, b) for (int i=(a); i>=(b); &mdash;i)</h1>

<h1>define PB push_back</h1>

<h1>define MP(A, B) make_pair(A, B)</h1>

<h1>define pow2(n) (1&lt;&lt;(n))</h1>

<h1>define pi acos(-1)</h1>

<h1>define eps 0.00000001</h1>

<h1>define lg(n) log10((n)*1.0)</h1>

<h1>define MaxN  1000000</h1>

<h1>define mod 1000000007</h1>

<h1>define mod2 1000000009</h1>

<h1>define mod3 1000007</h1>

<h1>define md(x) (((x)%mod+mod)%mod)</h1>

<h1>define inf 2147483647</h1>

<h1>define inf2 0x7fffffffffffffff</h1>

<h1>define ll long long</h1>

<h1>define typed int</h1>

<p>using namespace std;
void data(){
   freopen(&ldquo;data.in&rdquo;,&ldquo;r&rdquo;,stdin);
   freopen(&ldquo;data.out&rdquo;,&ldquo;w&rdquo;,stdout);
}
int cnt[MaxN];
int sum[MaxN],a;
char str[MaxN];
int main(){</p>

<pre><code>//data();
while(~scanf("%d",&amp;a)){
    scanf("%s",str);
    memset(cnt,0,sizeof(cnt));                  
    int len = strlen(str);
    sum[0]=0;
    rep(i,len){sum[i+1]=sum[i]+str[i]-'0';}
    repf(i,1,len)repf(j,i,len)cnt[sum[j]-sum[i-1]]++;

    ll res=0;
    if(a==0)
    {
        res+=1LL*cnt[0]*cnt[0];
        repd(i,sum[len])if(cnt[i]) res+=1LL*cnt[0]*cnt[i]*2;    
        cout&lt;&lt;res&lt;&lt;endl;
        continue;
    }                   
    for(int i=1;i*i&lt;=a;i++)
        if(a%i==0&amp;&amp;a/i&lt;=sum[len]) 
            if(i*i==a) res += 1LL*cnt[i]*cnt[a/i];
            else res += 1LL*cnt[i]*cnt[a/i]*2;                      
    cout&lt;&lt;res&lt;&lt;endl;    
}
</code></pre>

<p>   return 0;
}</p>

<p>```</p>

<h3><a href="http://acm.hust.edu.cn/vjudge/contest/view.action?cid=42652#problem/F">F &ndash; How far away ？</a></h3>

<p><strong>题意</strong>:  给你一颗树，查询两个之间的距离(有且只有一条)。   <br/>
<strong>key</strong>： 标准解放应该是LCA（最近公共祖先） ，由于查询数目极少，本题只有200，那么很明显赤裸裸的搜索也能过啊，不知道为啥木有学第写。 广搜深搜应该都可以，n比较大，需要cevtor或者邻接表存储。</p>

<p>```c++</p>

<h1>include <cstdio></h1>

<h1>include <cstdlib></h1>

<h1>include <cstring></h1>

<h1>include <cmath></h1>

<h1>include <climits></h1>

<h1>include <cctype></h1>

<h1>include <ctime></h1>

<h1>include <algorithm></h1>

<h1>include <iostream></h1>

<h1>include <queue></h1>

<h1>include <vector></h1>

<h1>include <set></h1>

<h1>include <map></h1>

<h1>include <stack></h1>

<h1>define SQR(x) ((x)*(x))</h1>

<h1>define rep(i, n) for (int i=0; i&lt;(n); ++i)</h1>

<h1>define repd(i,n)  for(int i=1;i&lt;=(n);++i)</h1>

<h1>define repf(i, a, b) for (int i=(a); i&lt;=(b); ++i)</h1>

<h1>define reps(i, a, b) for (int i=(a); i>=(b); &mdash;i)</h1>

<h1>define PB push_back</h1>

<h1>define MP(A, B) make_pair(A, B)</h1>

<h1>define pow2(n) (1&lt;&lt;(n))</h1>

<h1>define pi acos(-1)</h1>

<h1>define eps 0.00000001</h1>

<h1>define lg(n) log10((n)*1.0)</h1>

<h1>define MaxN  100000</h1>

<h1>define mod 1000000007</h1>

<h1>define mod2 1000000009</h1>

<h1>define mod3 1000007</h1>

<h1>define md(x) (((x)%mod+mod)%mod)</h1>

<h1>define inf 2147483647</h1>

<h1>define inf2 0x7fffffffffffffff</h1>

<h1>define ll long long</h1>

<h1>define typed int</h1>

<p>using namespace std;
void data(){
   freopen(&ldquo;data.in&rdquo;,&ldquo;r&rdquo;,stdin);
   freopen(&ldquo;data.out&rdquo;,&ldquo;w&rdquo;,stdout);
}
int pnt[MaxN],nxt[MaxN],head[MaxN],len;
bool used[MaxN];
int w[MaxN];
int fg,ans,n,m;</p>

<p>int t,e;
void init(){
   len=0;
   memset(head,-1,sizeof(head));
   memset(used,0,sizeof(used));
}
void addeg(int u,int v,int k){</p>

<pre><code>  pnt[len] = v;
  w[len]= k;
  nxt[len] = head[u]; 
  head[u] = len++;
</code></pre>

<p>}</p>

<p>void dfs(int u,int cur){
  int v;
  used[u]=1;
  if(fg)return;
  for(int i=head[u];i!=-1;i=nxt[i]){</p>

<pre><code>  v=pnt[i];
  if(v==e){fg=1;ans=cur+w[i];return;}
  if(fg) break;
  if(!used[v]){
     used[v]=1;          
     dfs(v,cur+w[i]);
  }
</code></pre>

<p>  }</p>

<p>}
//读入外挂
void RD(int &amp;a) {</p>

<pre><code>int value = 0, s = 1; 
char c;
while ((c = getchar()) == ' ' || c == '\n');
if (c == '-') s = -s; else value = c-48;
while ((c = getchar()) &gt;= '0' &amp;&amp; c &lt;= '9')
    value = value * 10 + c - 48;
a = s * value;
</code></pre>

<p>}
void RD(int &amp;a,int &amp;b){</p>

<pre><code>RD(a),RD(b);
</code></pre>

<p>}
void RD(int &amp;a,int &amp;b,int &amp;c){</p>

<pre><code>RD(a),RD(b),RD(c);
</code></pre>

<p>}</p>

<p>int main(){</p>

<pre><code>int T,a,b,k;
RD(T);
while(T--){
   init();         
   RD(n,m);
   rep(i,n-1){RD(a,b,k);addeg(a,b,k);addeg(b,a,k);}
   rep(i,m){
      RD(t,e);
      fg=0;
      memset(used,0,sizeof(used));
      dfs(t,0);
      printf("%d\n",ans);           
   }
}
return 0;
</code></pre>

<p>}
```</p>

<h1>最后祝学第们加油。</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces Round #237 (Div. 2) ]]></title>
    <link href="http://www.UnkelTao.com/blog/2014/03/21/codeforces-round-number-237-div-2/"/>
    <updated>2014-03-21T11:03:13+08:00</updated>
    <id>http://www.UnkelTao.com/blog/2014/03/21/codeforces-round-number-237-div-2</id>
    <content type="html"><![CDATA[<p>群中看到学第们发的比赛链接，于是又做了一场，结果悲惨。再也不在windows下做比赛了，电脑现在不知道出了啥问题，每次00：16都要自动关机。结果敲完的题没保存，又得重新敲一遍。</p>

<h3><a href="http://codeforces.com/contest/404/problem/A">A &ndash; Valera and X</a></h3>

<p><strong>题意</strong>： 给你一个矩阵，问你是不是恰好有2种字母，对角线字母一样，非对角线字母一样。<br/>
<strong>key</strong>:   模拟</p>

<!--more-->


<p>```ruby</p>

<p>n = gets.chomp!.to_i
a = Array.new(n)</p>

<p>n.times{|i|</p>

<pre><code>a[i] = gets.chomp!
</code></pre>

<p>}</p>

<p>if n==1</p>

<pre><code>puts "YES"
exit
</code></pre>

<p>end</p>

<p>x = a[0][0]
b = a[0][1]</p>

<p>if x == b</p>

<pre><code>puts "NO"
exit
</code></pre>

<p>end<br/>
n.times { |i|</p>

<pre><code>n.times { |j|  
    if i==j || (i+j==n-1)
        if a[i][j] != x
            puts "NO"
            exit
        end
    else
         if a[i][j] != b
            puts "NO"
            exit
        end
    end
}
</code></pre>

<p>}</p>

<p>puts &ldquo;YES&rdquo;</p>

<p>```</p>

<h2><a href="http://codeforces.com/contest/404/problem/B">B &ndash; Marathon</a></h2>

<p><strong>题意</strong>:  给你一个a*a的正方形，从(0,0)出发，沿边线逆时针行走，走n次，每次走d的距离，输出每次行走后的坐标。</p>

<p><strong>key</strong>:   模拟题，注意精度就好。</p>

<p>```ruby<br/>
eps = 1e-5
a,d = gets.chomp!.split.map { |e|  e.to_f}
n =gets.chomp!.to_i
cur_x=0.00
cur_y=0.00
pp=0.00</p>

<p>n.times {</p>

<pre><code>if cur_y &lt;= eps
    pp = cur_x  
elsif a-cur_x &lt;= eps
    pp = a + cur_y
elsif a-cur_y &lt;= eps
    pp = a*3 -cur_x 
else
    pp = a*4 -cur_y
end 
pp +=d;
t= (pp/a).floor
pp -= 1.0*t*a;
case t%4
when 0
    cur_x=pp
    cur_y=0
when 1
    cur_x=a
    cur_y=pp
when 2
    cur_x=a-pp
    cur_y=a
when 3
    cur_x=0
    cur_y=a-pp
end
printf("%.8f %.8f\n",cur_x,cur_y)
</code></pre>

<p>}
```</p>

<h2><a href="http://codeforces.com/contest/404/problem/C">C &ndash; Restore Graph</a></h2>

<p><strong>题意</strong>:  给你一个无向无子环的图，告诉你所有点到某一个选取的点的距离的矩阵d,问你能不能修复出满足条件的原图，其中一个点最多能够连接k条边。</p>

<p><strong>key</strong>:  首先d中肯定只有一个0，并且该点就是选取的点。否则肯定不存在。 对d进行排序，一条边一条边的修复模拟即可，注意满足每个点连接的边不能超过k个。</p>

<p>```ruby</p>

<p>n,k = gets.chomp!.split.map {|e| e.to_i}</p>

<p>D = gets.chomp!.split.map {|e| [e.to_i,0]}
flag = 0
n.times { |i|</p>

<pre><code>D[i][1]=i+1
if D[i][0] == 0
    flag += 1
end
</code></pre>

<p>}
if flag != 1</p>

<pre><code>p -1
exit
</code></pre>

<p>end</p>

<p>D.sort!
b = Array.new(2<em>n)
e = Array.new(2</em>n)
l=0
f=0
t=1
while t&lt;n</p>

<pre><code>if f==1 
    k -= 1 
end
if D[t].first!= (D[f].first+1) 
    puts "-1" 
    exit 
end
p=k
i = t
while i&lt;n
    break if D[i].first!=D[t].first
    if(p==0) 
        f +=1
        p=k 
    end
    if(p==0)  
        puts("-1") 
        exit 
    end
    p -= 1
    if(f==t)  
        puts("-1") 
        exit 
    end
    b[l]=D[f][1];
    e[l]=D[i][1];
    l+=1;i+=1;
end
f=t;
t=i;
</code></pre>

<p>end</p>

<p>p l
l.times { |i|</p>

<pre><code>puts "#{b[i]} #{e[i]}"
</code></pre>

<p>}
```</p>

<h2><a href="http://codeforces.com/contest/404/problem/D">D &ndash; Minesweeper 1D</a></h2>

<p><strong>题意</strong>: 给你一个1<em>n的地雷图，0表示左右都没有地雷，1表示左右共有1个雷，2表示左右都是雷，</em>表示该点是雷，？表示该点未知，求有多少种合法的方案。</p>

<p><strong>key</strong>: DP,<code>dp[i][0]表示i点是0的方案数，dp[i][1]表示i点是1的方案数，dp[i][2]表示该点是雷的方案数</code>，其中1可以转化为0，2可以转化为1。 因为“<em>1”的话后面肯定不会是雷，那么变成0的方案数，如果是"01"或“11”的话，后面肯定是雷，保持1不动，"</em>2"的话后面肯定是雷。<br/>
<strong>转移方程见代码</strong></p>

<p>```ruby
s = gets.chomp!
mods = 1000000007
dp = [[0,0,0],[0,0,0]]</p>

<p>len =s.size
cur =0;nxt=1;</p>

<p>dp[cur][0]=dp[cur][1]=1</p>

<p>for i in 0&hellip;len</p>

<pre><code>case s[i]
when '0'
    dp[nxt][0]=dp[cur][0]
when '1'
    dp[nxt][1]= dp[cur][0]
    dp[nxt][0]= dp[cur][2]
when '2'
    dp[nxt][1]=dp[cur][2]
when '*'
    dp[nxt][2]= (dp[cur][1]+dp[cur][2])%mods
when '?'
    dp[nxt][1]= (dp[cur][2]+dp[cur][0])%mods
    dp[nxt][0]= (dp[cur][0]+dp[cur][2])%mods
    dp[nxt][2]= (dp[cur][1]+dp[cur][2])%mods
end
cur = nxt
nxt = cur==0?1:0
dp[nxt] = [0,0,0]
</code></pre>

<p>end</p>

<p>puts &ldquo;#{(dp[cur][0]+dp[cur][2])%mods}&rdquo;
```</p>

<h2><a href="http://codeforces.com/contest/404/problem/E">E &ndash; Maze 1D</a></h2>

<p><strong>题意</strong>: 题意真是难读,大概就是机器人会左右移动，但是如果前面的点是障碍点的话他就不会向前进忽略这次移动，问在设置最少障碍点的情况下能够使得机器人最后停下的位置是以前没有走过的。 问这样的设置方案数有多少个（在障碍点最少的情况下）。</p>

<p><strong>key</strong>: 二分+枚举。</p>

<ul>
<li>首先我们可以确定，如果不加障碍点他最后停留的位置只走过一次的话，那么方案数肯定是1。</li>
<li>最多设置一个障碍点，如果一个障碍点不能满足情况，再多的障碍点也没用。</li>
<li>如果i点可以是障碍点，那么<code>(0,i]</code>的点都可以是障碍点，同理-i是障碍点，<code>[-1,0)</code>都可以是障碍点。</li>
</ul>


<p>有了这样的理解，那么遍可以2分来判断最大的i点是不是可以为障碍点了，判断方法模拟就可以了。<br/>
<strong>(ruby跑的太慢，TLE了，囧RZ，C++可以AC)</strong></p>

<p><strong>ruby代码</strong>
```ruby</p>

<h1>TLE 代码</h1>

<p>$s = gets.chomp!
$fg = 2
$len = $s.size
$mods = $len+7
$vis = Array.new((5*$mods))
def Judge(k)</p>

<pre><code>$fg += 1
pos = $mods + 100
k += pos
$vis[pos] = $fg
$len.times { |i|  
    if $s[i].chr=='R' and pos+1 !=k
        pos += 1
        # p 111111111111
    elsif $s[i].chr=='L' and pos-1 != k
        pos -= 1
        # p 222222222222
    end
    if i==$len-1
        # puts "b:"
        # p $vis[pos]
        # p pos 
        # p $fg
        return $vis[pos] != $fg
    end
    $vis[pos] = $fg
}
</code></pre>

<p>end</p>

<p>if Judge($mods+300)</p>

<pre><code>p 1
exit
</code></pre>

<p>end</p>

<p>res = 0
l = 1
r=$len</p>

<p>if Judge(1)</p>

<pre><code>while l&lt;r
    mid = ((l+r+1)/2).floor
    if Judge(mid)
        l = mid
    else
        r =mid -1
    end
end
res += l
</code></pre>

<p>end</p>

<p>l = 1
r=$len</p>

<p>if Judge(-1)</p>

<pre><code>while l&lt;r
    mid = (l+r+1)/2
    if Judge(-1*mid)
        l = mid
    else
        r =mid -1
    end
end
res += l
</code></pre>

<p>end</p>

<p>p res
```</p>

<p><strong>c++代码</strong><br/>
```c++
char str[MaxN];
int fg=2,len;
int vis[5*MaxN];</p>

<p>bool Judge(int k){
   fg++;
   int pos=1e6+10;
   k+=pos;
   vis[pos] = fg;
   // printf(&ldquo;%d %d %d\n&rdquo;, fg,pos,k);
   rep(i,len){</p>

<pre><code>  if(str[i]=='R'&amp;&amp;pos+1!=k) pos++;
  if(str[i]=='L'&amp;&amp;pos-1!=k) pos--;
  if(i==len-1){
    // printf("ans %d  %d %d\n", vis[pos],fg,pos);
    return vis[pos] != fg;
  }
  vis[pos] = fg;
</code></pre>

<p>   }  <br/>
}</p>

<p>int main()
{</p>

<pre><code>while(~scanf("%s",str)){
    len = strlen(str);
    memset(vis,0,sizeof(vis));

    if(Judge(1e6+200)){
        printf("1\n");
        return 0;
    }

    ll res = 0;
    int l=1,r=len,mid;
    if (Judge(1))
    {
        while(l&lt;r){
            mid = (l+r+1)/2;
            if(Judge(mid)) l=mid;
            else r=mid-1;
        }
        res += l;
    }

    if (Judge(-1))
    {
        l=1,r=len,mid;
        while(l&lt;r){
            mid = (l+r+1)/2;
            if(Judge(-mid)) l=mid;
            else r=mid-1;
        }
        res += l;           
    }
    cout&lt;&lt;res&lt;&lt;endl;
}   
return 0;
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces Round #235 (Div. 2) ]]></title>
    <link href="http://www.UnkelTao.com/blog/2014/03/11/codeforce-235/"/>
    <updated>2014-03-11T14:02:19+08:00</updated>
    <id>http://www.UnkelTao.com/blog/2014/03/11/codeforce-235</id>
    <content type="html"><![CDATA[<p>好久没做CF了，觉得再不做估计以后笔试都过不鸟，于是还得经常做一做。</p>

<p>CF的回滚对我木有影响阿，我已经好久没做了似乎。</p>

<p>这次的DIV2似乎比以前的简单一点。</p>

<h2><a href="http://codeforces.com/contest/401/problem/A">A. Vanya and Cards</a></h2>

<p>送分,大概给你一堆数，问你最少还需要几个绝对值不超过X的数能够让他们的和为0.</p>

<p><code>ruby
n,x = gets.chomp!.split.map { |e|  e.to_i}
sum = gets.split.collect{|x| x.to_i}.inject{|y, x| y += x}
p (sum.abs + x -1)/x
</code></p>

<!--more-->


<h2><a href="http://codeforces.com/contest/401/problem/B">B. Sereja and Contests</a></h2>

<p>模拟题
```ruby
n,k = gets.chomp!.split.map { |e|  e.to_i}
A = Array.new(n) { |i|  0}
k.times {<br/>
   c,d1,d2 =  gets.chomp!.split.map { |e|  e.to_i}
   A[d1-1] = 1
   if d2 != nil</p>

<pre><code> A[d2-1] = 1
</code></pre>

<p>   end
}</p>

<p>mx=0
mi=0
cur=0
(n-1).times do |i|
   if A[i] == 0</p>

<pre><code>    cur += 1
</code></pre>

<p>   else</p>

<pre><code>   mx += cur
   mi += (cur+1)/2
   cur = 0  
</code></pre>

<p>   end<br/>
end</p>

<p>mx += cur
mi += (cur+1)/2
puts &ldquo;#{mi} #{mx}&rdquo;
```</p>

<h2><a href="http://codeforces.com/contest/401/problem/C">C. Team</a></h2>

<p>也是模拟题，给你n个1，m个0，让你给出一种排列，不能有3个1连在一起，不能有两个0连在一起，给出任意一种方案即可，不能则输出-1
```ruby
m,n = gets.chomp!.split.map { |e|  e.to_i}
if n+1 &lt; m</p>

<pre><code>p -1
exit
</code></pre>

<p>elsif (m+1)*2 &lt; n</p>

<pre><code>p -1
exit
</code></pre>

<p>end</p>

<p>if n == m</p>

<pre><code>n.times{printf "10" }
puts ""
</code></pre>

<p>elsif m == n+1</p>

<pre><code>n.times{print "01"}
puts 0
</code></pre>

<p>elsif (m+1)*2 == n</p>

<pre><code>m.times{printf "110"}
puts "11"
</code></pre>

<p>elsif m*2 == n</p>

<pre><code>m.times{print "110"}
puts ""
</code></pre>

<p>else</p>

<pre><code>k = n - 1 - m
(k).times {print "110"}
(m-k).times{print "10"}
puts "1"
</code></pre>

<p>end
```</p>

<h2><a href="http://codeforces.com/contest/401/problem/D">D. Roman and Numbers</a></h2>

<p>暴力+状态压缩。
题意：给你一个不超过18位的数n,和不超过100的m,将n进行重排(改变里面的位置，当然0不能排在最前面)，问有多少个数是m的倍数。
ruby似乎跑的很慢，不幸TLE的，C++可以过</p>

<p>```ruby
n,m = gets.chomp!.split
m = m.to_i
len = n.size
dp = Array.new((1&lt;&lt;len)+2) {Array.new(m+5,0)}
dp[0][0] = 1</p>

<p>(1&lt;&lt;len).times do |i|</p>

<pre><code>m.times { |j|  
    tp = Array.new(20,0)
    len.times{|k|
        t = n[k].chr.to_i
        if i&amp;(1&lt;&lt;k) != 0 || (i==0 &amp;&amp; t==0) || tp[t] !=0 
            next
        end
        tp[t] = 1
        dp[i|(1&lt;&lt;k)][(j*10+t)%m] +=dp[i][j]
    }   
}
</code></pre>

<p>end
p dp[(1&lt;&lt;len)-1][0]
```</p>

<h2><a href="http://codeforces.com/contest/401/problem/E">E. Olympic Games</a></h2>

<p>略难，暂时不会</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MemSQL start]]></title>
    <link href="http://www.UnkelTao.com/blog/2013/08/04/memsql-start/"/>
    <updated>2013-08-04T20:13:34+08:00</updated>
    <id>http://www.UnkelTao.com/blog/2013/08/04/memsql-start</id>
    <content type="html"><![CDATA[<p>【测试代码】</p>

<p>昨晚的CF略晚~~而且提示说div2的少年们，你们很可能会爆0~~~</p>

<p>于是赤裸裸的去了，然后悲催的爆0了</p>

<p>只看了A、B两题~~A题觉得挺简单的，敲了个2分交上去过了Pass，想了想B觉得没有想法就睡觉了。。。</p>

<!--more-->


<p>早上一起洗个澡吃完早餐一看<del>WA了</del>然后看了下代码，我去，尼玛有一行特判输出没改，直接注释掉没用的特判就过了</p>

<p>说说A题吧，题意大概是一串字符串，求一个长度为k的子串，是的用最少的该子串来构成源串，你可以使用子串的其中任意个字符按照你想要的方式排序拼接,输出需要的最少个数和该k子串。</p>

<p>解法：数据那么弱，统计下源串每个字母的个数，直接暴力匹配从1个到(n+k-1)/k个能否拼成源串就好,写的2分,也过了.</p>

<p>```c++</p>

<h1>include <cstdio></h1>

<h1>include <cstdlib></h1>

<h1>include <cstring></h1>

<h1>include <cmath></h1>

<h1>include <climits></h1>

<h1>include <cctype></h1>

<h1>include <ctime></h1>

<h1>include <algorithm></h1>

<h1>include <iostream></h1>

<h1>include <queue></h1>

<h1>include <vector></h1>

<h1>include <set></h1>

<h1>include <map></h1>

<h1>include <stack></h1>

<h1>define SQR(x) ((x)*(x))</h1>

<h1>define rep(i, n) for (int i=0; i&lt;(n); ++i)</h1>

<h1>define repd(i,n)  for(int i=1;i&lt;=(n);++i)</h1>

<h1>define repf(i, a, b) for (int i=(a); i&lt;=(b); ++i)</h1>

<h1>define reps(i, a, b) for (int i=(a); i>=(b); &mdash;i)</h1>

<h1>define PB push_back</h1>

<h1>define MP(A, B) make_pair(A, B)</h1>

<h1>define pow2(n) (1&lt;&lt;(n))</h1>

<h1>define pi acos(-1)</h1>

<h1>define eps 0.00000001</h1>

<h1>define lg(n) log10((n)*1.0)</h1>

<h1>define MaxN  1000000</h1>

<h1>define mod 10e+7</h1>

<h1>define ll long long</h1>

<h1>define typed int</h1>

<p>using namespace std;
void data(){
   freopen(&ldquo;data.in&rdquo;,&ldquo;r&rdquo;,stdin);
   freopen(&ldquo;data.out&rdquo;,&ldquo;w&rdquo;,stdout);
}
char s[1100];
int su[27];
int k;
int jd(int n){
   int cnt=0;
   rep(i,26){
       cnt+=(su[i]+n-1)/n;
   }
   if(cnt&lt;=k) return 1;
   else return 0;
}
void pt(int n){
 //  cout&lt;&lt;&ldquo;pt&rdquo;&lt;&lt;endl;  
   cout&lt;&lt;n&lt;&lt;endl;   
   string ss=&ldquo;&rdquo;;
   int cnt=0;
   rep(i,26){
      rep(j,(su[i]+n-1)/n){ ss+=(i+&lsquo;a&rsquo;);cnt++;}
   }
   cout&lt;&lt;ss;
   rep(i,k-cnt)cout&lt;&lt;&lsquo;a&rsquo;;
   cout&lt;&lt;endl;
}
void bit(int l,int r){
     while(l&lt;r){
     int mid=(l+r)/2;
     int kk=jd(mid);
       if(kk>0) r=mid;
       else l=mid+1;   
     }
     pt(l);
}
 
int main(){
   while(cin>>s>>k){
     rep(i,26) su[i]=0;
     rep(i,strlen(s))su[s[i]&ndash;&lsquo;a&rsquo;]++;
     int ma=0,cnt=0;
     rep(i,26)if(su[i]){cnt++;ma=max(ma,su[i]);}
     if(k&lt;cnt)cout&lt;&lt;-1&lt;&lt;endl;
     else{
       
         
        //bit((strlen(s)+k-1)/k,ma+1); //2分
        repd(i,strlen(s)){   //暴力
           if(jd(i)){pt(i);break;}
        }
     }
   }       
   return 0;
}
```</p>

<p>B题一看最长回文子序列，能想到的方法就是2维DP出LCS<del>可是源串长度为50000，2维DP肯定挂</del>早上起来，顺带看了一眼，发现一个条件，回文最长为100（大于100输出100的就行）,这个想了下，就好搞了.一共26字母，说明在2600个字母序列里面肯定会产生回文长度至少是100的。。</p>

<p>这样超过长度2600的就可以直接DP前2600个字母就行了<del>然后就是模板题了</del>真是弱爆了~~</p>

<p>```c++</p>

<h1>include <cstdio></h1>

<h1>include <cstdlib></h1>

<h1>include <cstring></h1>

<h1>include <cmath></h1>

<h1>include <climits></h1>

<h1>include <cctype></h1>

<h1>include <ctime></h1>

<p> </p>

<h1>include <algorithm></h1>

<h1>include <iostream></h1>

<h1>include <queue></h1>

<h1>include <vector></h1>

<h1>include <set></h1>

<h1>include <map></h1>

<h1>include <stack></h1>

<p> </p>

<h1>define SQR(x) ((x)*(x))</h1>

<h1>define rep(i, n) for (int i=0; i&lt;(n); ++i)</h1>

<h1>define repd(i,n)  for(int i=1;i&lt;=(n);++i)</h1>

<h1>define repf(i, a, b) for (int i=(a); i&lt;=(b); ++i)</h1>

<h1>define reps(i, a, b) for (int i=(a); i>=(b); &mdash;i)</h1>

<h1>define PB push_back</h1>

<h1>define MP(A, B) make_pair(A, B)</h1>

<h1>define pow2(n) (1&lt;&lt;(n))</h1>

<h1>define pi acos(-1)</h1>

<h1>define eps 0.00000001</h1>

<h1>define lg(n) log10((n)*1.0)</h1>

<h1>define MaxN  50000</h1>

<h1>define mod 10e+7</h1>

<h1>define ll long long</h1>

<h1>define typed int</h1>

<p>using namespace std;
void data(){
   freopen(&ldquo;data.in&rdquo;,&ldquo;r&rdquo;,stdin);
   freopen(&ldquo;data.out&rdquo;,&ldquo;w&rdquo;,stdout);
}
int dp[2620][2620];
char c[MaxN+100],a[2620],b[2620];
int k[2620][2620];
int cnt[27];
void LCS(int len){
     int i, j;
      rep(i,len+1){ dp[i][0]=dp[0][i]=0;}
      repd(i,len)
        repd(j,len)
        {
            if(a[i]==b[j]){
                k[i][j]=0;
                dp[i][j]=1+dp[i-1][j-1]; 
            }
            else if(dp[i-1][j]>=dp[i][j-1]){
                k[i][j]=1;
                dp[i][j]=dp[i-1][j];
            }
            else{
                 k[i][j]=-1;
                 dp[i][j]=dp[i][j-1];
            }        
        }
}
char st[2610];
int num;
void pt(int m,int n){
   if(n==0||m==0) return ;
   if(k[m][n]==0){
     pt(m-1,n-1);
     st[num++]=a[m];
   }
   else if(k[m][n]>0) pt(m-1,n);
   else pt(m,n-1); 
}
int main(){
    //data();
    while(~scanf(&ldquo;%s&rdquo;,c+1)){                           
     int len=strlen(c+1);
     num=0;
     bool fg=1;
     repd(i,len){
         cnt1-&lsquo;a&rsquo;]++;
         if(cnt1-&lsquo;a&rsquo;]>=100){
           rep(j,100)cout&lt;&lt;c[i];
           cout&lt;&lt;endl;fg=0;break;
         }
     }
     if(!fg)continue;
     if(len>2602) len=2602;
     repd(i,len){a[i]=c[i];b[len+1-i]=c[i];}
     LCS(len);
     pt(len,len);
     if(num&lt;=100)printf(&ldquo;%s\n&rdquo;,st);
     else{
       rep(i,50)cout&lt;&lt;st[i];reps(i,49,0)cout&lt;&lt;st[i]; cout&lt;&lt;endl; 
     }
     
    }          
   return 0;
}
```</p>

<p>（效果似乎一般）</p>
]]></content>
  </entry>
  
</feed>
