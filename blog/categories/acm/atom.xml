<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ACM | /UnkelTao]]></title>
  <link href="http://www.UnkelTao.com/blog/categories/acm/atom.xml" rel="self"/>
  <link href="http://www.UnkelTao.com/"/>
  <updated>2015-05-01T16:27:59+01:00</updated>
  <id>http://www.UnkelTao.com/</id>
  <author>
    <name><![CDATA[UnkelTao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2014年西南交通大学 新秀杯 ACM程序设计大赛 决赛解题报告]]></title>
    <link href="http://www.UnkelTao.com/blog/2014/11/16/2014-swjtu-acm-onsite-programming-contest/"/>
    <updated>2014-11-16T10:41:05+00:00</updated>
    <id>http://www.UnkelTao.com/blog/2014/11/16/2014-swjtu-acm-onsite-programming-contest</id>
    <content type="html"><![CDATA[<p><strong>比赛链接：</strong>  <a href="http://acm.swjtu.edu.cn/JudgeOnline/showcontest?contest_id=1178">新秀杯 ACM程序设计大赛决赛</a>  </p>

<p>比赛还算成功，算上友情参赛，总共有7个题目有人通过，第一名最后成绩为5题，虽然离我想的差一点。不过还是不错~~  </p>

<!--more-->

<h2 id="a-httpacmswjtueducnjudgeonlineshowproblemproblemid2173">A <a href="http://acm.swjtu.edu.cn/JudgeOnline/showproblem?problem_id=2173">从头再来</a></h2>

<p>只需要简单的统计单词A中每个字母出现的次数，与B中每个字母出现的次数做比较即可。</p>

<p><code>
#include &lt;cstdio&gt;
#include &lt;cmath&gt;
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#define SQR(x) ((x)*(x))
#define rep(i, n) for (int i=0; i&lt;(n); ++i)
#define repd(i,n)  for(int i=1;i&lt;=(n);++i)
#define repf(i, a, b) for (int i=(a); i&lt;=(b); ++i)
#define reps(i, a, b) for (int i=(a); i&gt;=(b); --i)
#define MaxN  10010
#define ll long long
using namespace std;
void data(){
   freopen("data.in","r",stdin);
   freopen("data.out","w",stdout);
}
char a[MaxN],b[MaxN];
int s1[27],s2[27];
int gao(){
    memset(s1,0,sizeof(s1));
    memset(s2,0,sizeof(s2));
    int l1=strlen(a),l2=strlen(b);
    rep(i,l1) s1[a[i]-'a']++;
    rep(i,l2) s2[b[i]-'a']++;
    rep(i,26)if(s1[i]&lt;s2[i]) return 0;
    return 1;   
}
int main(){
   //data();
   while(cin&gt;&gt;a&gt;&gt;b){
      printf("%s\n",gao()?"Yes":"No");
   }
   return 0;
}
</code></p>

<h2 id="b-httpacmswjtueducnjudgeonlineshowproblemproblemid2175">B <a href="http://acm.swjtu.edu.cn/JudgeOnline/showproblem?problem_id=2175">挖掘机技术哪家强</a></h2>

<p><img src="http://unkeltao.qiniudn.com/wailian/10_onsite_B.jpg" alt="" />   </p>

<p>~~连接DF，那么ADF的面积为正方形的一半，也是矩形的一半，正方形的面积就等于矩形的面积。
<code>AE=a*a/b; DE=sqrt(a*a-AE*AE)</code></p>

<p><code>
int main(){
   //  data();
   int a,b;
   while(~scanf("%d%d",&amp;a,&amp;b)){
       double res=sqrt(a*a-(a*a*1.0/b)*(a*a*1.0/b))*(a*a*1.0/b)/2.0;
       printf("%.2lf\n",res);             
   }
   return 0;
}
</code></p>

<h2 id="c-yogykwaniphonehttpacmswjtueducnjudgeonlineshowproblemproblemid2175">C <a href="http://acm.swjtu.edu.cn/JudgeOnline/showproblem?problem_id=2175">YogyKwan的iPhone也弯了</a></h2>

<p>假设半径为<code>r,t</code>为输入的数据那么可以写出如下等式：
<code>r*sin(pi-15/r/2)=t/2</code>
我们可以知道，当<code>r</code>越大时候，<code>t</code>就会越小，于是我们可以二分判定。</p>

<p><code>
#include&lt;cstdio&gt;
#include&lt;cmath&gt;
const double PI=acos(-1);
const double eps=1e-10;
int main(){
    //freopen("data.in","r",stdin);freopen("data2.out","w",stdout);
    double l,w,r,a,sj,xj,m,t;
    while(scanf("%lf",&amp;w)!=EOF){
        l=15;
        sj=l/PI,xj=0.5*l/PI;
        w*=0.5,l*=0.5;
        while(sj-xj&gt;eps){
            m=(sj+xj)*0.5;
            t=m*sin(l/m);
            if(t&gt;w) sj=m;
            else xj=m;
        }
        r=m;
        a=l/r*2;
        printf("%f %f\n",r,a);
    }
    return 0;
}
</code></p>

<h2 id="d-httpacmswjtueducnjudgeonlineshowproblemproblemid2776">D <a href="http://acm.swjtu.edu.cn/JudgeOnline/showproblem?problem_id=2776">强迫症改变世界</a></h2>

<p>不妨用 <code>f(k)</code> 来表示摆放<code>k</code>个座位的方案数。我们可以把这些方案分成两类：最后一个座位是坐女生，或者最后一个座位是坐男生。如果是前一种情形，则我们只需要看前<code>k–1</code>座位有多少摆法就可以了；如果是后一种情形，那么倒数第二个座位必须是女生，因而这种情形下的方案数就取决于前 <code>k–2</code>个座位的安排方案数。因此我们得到， <code>f(k) = f(k – 1) + f(k – 2)</code> 其中<code>f[1]=2,f[2]=3;</code></p>

<p><code>
#define SQR(x) ((x)*(x))
#define rep(i, n) for (int i=0; i&lt;(n); ++i)
#define repd(i,n)  for(int i=1;i&lt;=(n);++i)
#define repf(i, a, b) for (int i=(a); i&lt;=(b); ++i)
#define reps(i, a, b) for (int i=(a); i&gt;=(b); --i)
int f[1002];
void gao(){
     f[0]=1;
     f[1]=2;
     repf(i,2,1001) f[i]=(f[i-1]+f[i-2])%mod;           
}
int main(){
    //data();
    int n;
    gao();
    while(~scanf("%d",&amp;n)){
        printf("%ld\n",f[n]);
    }
    return 0;
}
</code></p>

<h2 id="e-2httpacmswjtueducnjudgeonlineshowproblemproblemid2177">E <a href="http://acm.swjtu.edu.cn/JudgeOnline/showproblem?problem_id=2177">强迫症改变世界2</a></h2>

<p>此题需要先会容斥定理， <code>n</code>以内<code>a,b</code>的倍数的个数有， <code>sum=n/a+n/b-n/lcm(a,b)</code>;
然后我们枚举出所有的只含有<code>4</code>或者<code>7</code>的数字（大概<code>1000</code>个），然后去掉是前面出现过得数的倍数的数（如<code>44</code>是<code>4</code>的倍数） 大概还剩下不到<code>600</code>个，看起来很大，因为容斥定理的复杂度是<code>2^n</code>次方，但是，此题<code>r</code>的范围不是小，我们在做<code>lcm</code>的时候，很快就会超过范围，就不需要继续向下了，然后我们从大往小做，大概只需要递归<code>10</code>万次左右。</p>

<p>剩下的可以参考代码。</p>

<p><code>
#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;cstring&gt;
#include &lt;cmath&gt;
#include &lt;climits&gt;
#include &lt;cctype&gt;
#include &lt;ctime&gt;
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;queue&gt;
#include &lt;vector&gt;
#include &lt;set&gt;
#include &lt;map&gt;
#include &lt;stack&gt;
#define SQR(x) ((x)*(x))
#define rep(i, n) for (int i=0; i&lt;(n); ++i)
#define repd(i,n)  for(int i=1;i&lt;=(n);++i)
#define repf(i, a, b) for (int i=(a); i&lt;=(b); ++i)
#define reps(i, a, b) for (int i=(a); i&gt;=(b); --i)
#define PB push_back
#define MP(A, B) make_pair(A, B)
#define pow2(n) (1&lt;&lt;(n))
#define pi acos(-1)
#define eps 0.00000001
#define lg(n) log10((n)*1.0)
#define MaxN  1000000000
#define mod 1000000007
#define md(x) (((x)%mod+mod)%mod)
#define ll long long
using namespace std;
void data(){
   freopen("sample.in","r",stdin);
   freopen("sample.out","w",stdout);
}
ll gcd(ll a,ll b){return b?gcd(b,a%b):a;}
int t,n,m;
ll l,r,ans,a[3000],b[3000];
bool vis[3000];
void pre(int x,ll y)
{
  if(y&gt;MaxN)return;
  if(x&gt;0)a[++m]=y;
  pre(x+1,y*10+4);
  pre(x+1,y*10+7);
}
void gao(){
  sort(a+1,a+m+1);
  repd(i,m)
     if(!vis[i])
     {
         b[++n]=a[i];
         for(int j=i+1;j&lt;=m;j++)
             if(!(a[j]%a[i]))
                 vis[j]=1;
     }
  repd(i,n) a[n-i+1]=b[i];
}
void dfs(int x,int y,ll z)
{
  if(x&gt;n)
  {
    if(y&amp;1)ans+=r/z-(l-1)/z;
    else if(y)ans-=r/z-(l-1)/z;
    return;
  }
  dfs(x+1,y,z);
  ll tmp=z/gcd(a[x],z);
  if((a[x]*tmp)&lt;=r) dfs(x+1,y+1,a[x]*tmp);
}
int main()
{
    //data();
    pre(0,0);
    gao();
    while(~scanf("%lld%lld",&amp;l,&amp;r)){
      ans=0;
      dfs(1,0,1);
      printf("%lld\n",ans);
    }
    return 0;
}
</code></p>

<h2 id="f-iihttpacmswjtueducnjudgeonlineshowproblemproblemid2178">F <a href="http://acm.swjtu.edu.cn/JudgeOnline/showproblem?problem_id=2178">不幸的程序员II</a></h2>
<p>矩阵快速幂，如果你还不会这个，那么该先去学习矩阵快速幂。</p>

<p>简单公式推导如下:
<img src="http://unkeltao.qiniudn.com/wailian/10_F_1.png" alt="" />
<img src="http://unkeltao.qiniudn.com/wailian/10_F_2.png" alt="" /></p>

<p><code>
#include &lt;cstdio&gt;
#include&lt;iostream&gt;
#include&lt;cstdlib&gt;
#include&lt;stdio.h&gt;
#include&lt;math.h&gt;
using namespace std;
const int MAX = 3;
#define rep(i, n) for (int i=0; i&lt;(n); ++i)
#define repd(i,n)  for(int i=1;i&lt;=(n);++i)
#define repf(i, a, b) for (int i=(a); i&lt;=(b); ++i)
#define reps(i, a, b) for (int i=(a); i&gt;=(b); --i)
#define mod 1000000007
#define ll long long
typedef struct
{
   ll m[MAX][MAX];
} Matrix;
Matrix P;
Matrix I ={1,0,0,0,1,0,0,0,1};
Matrix matrixmul(Matrix a,Matrix b) 
{
   int i,j,k;
   Matrix c;
   rep(i,MAX)
   rep(j,MAX)
   {
     c.m[i][j] = 0;
     rep(k,MAX) c.m[i][j] += (a.m[i][k] * b.m[k][j])%(mod);
     c.m[i][j] %= (mod);
   }
   return c;
}
Matrix quickpow(ll n, Matrix P)
{
    Matrix m = P, b = I;
    while (n &gt;= 1)
    {
        if (n &amp; 1)
        b = matrixmul(b,m);
        n = n &gt;&gt; 1;
        m = matrixmul(m,m);
    }
    return b;
}
void data(){
   freopen("data.in","r",stdin);
   freopen("data.out","w",stdout);
}
int main()
{
    ll a,b,n,m;
    //data();
    while(~scanf("%lld%lld%lld%lld",&amp;n,&amp;m,&amp;a,&amp;b))
    {   
        Matrix T1,T2,T;
        Matrix P1 = {2,1,3,1,0,0,0,0,1};
        Matrix P2 = {5*8,4*8+7,6*8+9,5,4,6,0,0,1};
        T1=quickpow((m-2),P1);
        T2=quickpow(1LL*n-1,matrixmul(T1,P2));
        T=matrixmul(T2,T1);
        Matrix tmp={b%mod,0,0,a%mod,0,0,1,0,0};
        T=matrixmul(T,tmp);
        printf("%lld\n",T.m[0][0]%mod); 
    }
    return 0; 
}
</code></p>

<h2 id="g-httpacmswjtueducnjudgeonlineshowproblemproblemid2179">G <a href="http://acm.swjtu.edu.cn/JudgeOnline/showproblem?problem_id=2179">你是一个好人</a></h2>

<p>概率DP，我们假设<code>dp[i][j]</code>表示前i次表白收集了j张不同卡的概率，那么很明显:
<code>i==1,j==1</code>时 <code>dp[1][1] = 1</code>;<br />
<code>i&lt;j </code>,  <code>dp[i][j] = 0;</code>(一共都不到j张，怎么收集) <br />
那么<code>dp[i+1][j] = dp[i][j]*(j/n)+dp[i][j-1]*(n-(j-1))/n</code>;
第一个表示第<code>i+1</code>收集的与之前的<code>j</code>张是一样的，第二个表示第<code>i+1</code>次收集的与前<code>j-1</code>个不同，那么就就多收集了一个，变成<code>j</code>个。</p>

<p><code>
#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;cstring&gt;
#include &lt;cmath&gt;
#include &lt;climits&gt;
#include &lt;cctype&gt;
#include &lt;ctime&gt;
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;queue&gt;
#include &lt;vector&gt;
#include &lt;set&gt;
#include &lt;map&gt;
#include &lt;stack&gt;
#define SQR(x) ((x)*(x))
#define rep(i, n) for (int i=0; i&lt;(n); ++i)
#define repd(i,n)  for(int i=1;i&lt;=(n);++i)
#define repf(i, a, b) for (int i=(a); i&lt;=(b); ++i)
#define reps(i, a, b) for (int i=(a); i&gt;=(b); --i)
#define PB push_back
#define MP(A, B) make_pair(A, B)
#define pow2(n) (1&lt;&lt;(n))
#define pi acos(-1)
#define eps 0.00000001
#define lg(n) log10((n)*1.0)
#define MaxN  1000000
#define mod 1000000007
#define ll long long
#define typed int
using namespace std;
void data(){
   freopen("data.in","r",stdin);
   freopen("data.out","w",stdout);
}
//fast read
void RD(int &amp;a) {
    int value = 0, s = 1;
    char c;
    while ((c = getchar()) == ' ' || c == '\n');
    if (c == '-') s = -s; else value = c-48;
    while ((c = getchar()) &gt;= '0' &amp;&amp; c &lt;= '9')
        value = value * 10 + c - 48;
    a = s * value;
}
void RD(int &amp;a,int &amp;b){
    RD(a),RD(b);
}
void RD(int &amp;a,int &amp;b,int &amp;c){
    RD(a),RD(b),RD(c);
}
double dp[101][2002];
double gao(int n,int m){
     memset(dp,0,sizeof(0));
     dp[0][0]=1.0;
     repd(i,n)repf(j,i,m) dp[i][j]=dp[i-1][j-1]*(n-i+1)/n+dp[i][j-1]*i/n; 
     return dp[n][m];
}
int main(){
   //data();
   int t,n,m;
   RD(t);
   rep(i,t){
      RD(n,m);
      if(m&lt;n)printf("%.6lf\n",0);
      else printf("%.6lf\n",gao(n,m));
   }
   return 0;
}
</code></p>

<h2 id="h-httpacmswjtueducnjudgeonlineshowproblemproblemid2180">H <a href="http://acm.swjtu.edu.cn/JudgeOnline/showproblem?problem_id=2180">最萌身高差</a></h2>

<p>此题为树状数组的 YY 题。。。<br />
首先我们考虑若 <code>&beta;</code> 固定的情况，那么根据同模的性质。。如果 <code>a%p == b%p</code> 那么 <code>|a-b| = k * p</code><br />
这样预处理一下，只要找到模相同的个数，就能知道有多少组了。。此题 <code>&beta;</code>很小，那么我们维护各个余数的前缀和就可以求个分别余数的区间和了。。。，因为此题要求支持修改，那么我们就使
用树状数组（如果你还不会，那么赶紧学起吧）就可以满足要求了。。、、 <br />
关键是怎么去修改更新；修改了一个数，我们需要一增一减，余数为 <code>a% &beta;</code> 的减一， <code>(a + p)% &beta;</code> 的加 1.. 这样就可以很好的查找和维护了。。 </p>

<p><code>&beta;</code>不一样？ 但是<code>&beta;</code>很小啊，我们再增加一维？这么做会MLE，那么我们离线处理每个<code>&beta;</code>跑一次就好了。</p>

<p>```
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <climits>
#include <cctype>
#include <ctime>
#include <algorithm>
#include <iostream>
#include <queue>
#include <vector>
#include <set>
#include &lt;map&gt;
#include <stack>
#define SQR(x) ((x)*(x))
#define rep(i, n) for (int i=0; i&lt;(n); ++i)
#define repd(i,n)  for(int i=1;i&lt;=(n);++i)
#define repf(i, a, b) for (int i=(a); i&lt;=(b); ++i)
#define reps(i, a, b) for (int i=(a); i&gt;=(b); --i)
#define PB push_back
#define MP(A, B) make_pair(A, B)
#define pow2(n) (1&lt;&lt;(n))
#define pi acos(-1)
#define eps 0.00000001
#define lg(n) log10((n)*1.0)
#define MaxN  200000
#define mod 13041290
#define mod2 1000000009
#define mod3 1000007
#define md(x) (((x)%mod+mod)%mod)
#define inf 2147483647
#define inf2 0x7fffffffffffffff
#define ll long long
#define typed int
using namespace std;
void data(){
   freopen("data.in","r",stdin);
   freopen("data2.out","w",stdout);
}
int C[10][MaxN]={0};
int n,m;
int read(int k,int i){
  int sum=0;
  for(;k;k-=(k&amp;-k)) sum += C[i][k];
  return sum;
}
void update(int k,int p,int i){
    for(;k&lt;=n;k+=(k&amp;-k)) C[i][k] += p;
}
//fast read
void RD(int &amp;a) { 
    int value = 0, s = 1; 
    char c;
    while ((c = getchar()) == ' ' || c == '\n');
    if (c == '-') s = -s; else value = c-48;
    while ((c = getchar()) &gt;= '0' &amp;&amp; c &lt;= '9')
        value = value * 10 + c - 48;
    a = s * value;
}
int B[MaxN],A[MaxN];
int l[MaxN],r[MaxN],beta[MaxN];
int q[MaxN];
ll ans[MaxN];
int used[11];
int Q,a,p,m,l1,r1,beta1;
void gao(){
  memset(used,0,sizeof(used));
  rep(i,n) RD(A[i]);
  int len=0,t=0;
  rep(i,m){
      RD(Q);
    if(Q==1)RD(a),RD(p),l[len]=a,r[len]=p,q[len++]=-1;
    else{
         RD(l1),RD(r1),RD(beta1);
         l[len]=l1,r[len]=r1,beta[len]=beta1;
         used[beta1]=1,q[len++]=t++;
       if(beta1==1){ 
        ll ttt=r1-l1+1; 
        ans[q[len-1]]=ttt*(ttt-1)/2%mod;
       }
     }
  }
}
int main(){
  //data();
  while(~scanf("%d%d",&amp;n,&amp;m)){  
     gao();
     repf(k,2,10){
        if(!used[k])continue;
        memset(C,0,sizeof(C));
        rep(i,n) B[i]=A[i],update(i+1,1,A[i]%k);
        rep(i,m){
           if(q[i]==-1){
              update(l[i],-1,B[l[i]-1]%k);
              update(l[i],1,(B[l[i]-1]+r[i])%k);
              B[l[i]-1]+=r[i];
              continue;
           }
           if(beta[i]!=k)continue;
           ll sum=0;
           rep(j,beta[i]){
               ll tp = read(r[i],j) - read(l[i]-1,j);
               sum += tp*(tp-1)/2;
               sum %=mod;
           }
           ans[q[i]]=sum%mod;
        } 
     }
     rep(i,t) printf("%lld\n",ans[i]%mod);
  }
  return 0;
}</stack></set></vector></queue></iostream></algorithm></ctime></cctype></climits></cmath></cstring></cstdlib></cstdio></p>

<p>```</p>

<h2 id="i-missinghttpacmswjtueducnjudgeonlineshowproblemproblemid2181">I <a href="http://acm.swjtu.edu.cn/JudgeOnline/showproblem?problem_id=2181">Missing教大家画矩形</a></h2>

<p>模拟题目，确定一个矩形只需要对角线确定，
所以找出最小，最大的x值和y值就行了
题目虽然简单，但是如果写法不好，也会被坑~
(此题来自于Missing)</p>

<p>```
//Draw A Rectangle
//Author: _missing
// 模拟题，确定一个矩形只需要对角线确定，
// 所以找出最小，最大的x值和y值就行了
// 题目虽然简单，但是如果写法不好，也会被坑~
#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
void draw(int x1, int y1, int x2, int y2) {
    for (int i = 0; i &lt; x1; ++i) puts("");
    for (int i = x1; i &lt;= x2; ++i) {
        for (int j = 0; j &lt; y1; ++j) putchar(' ');
        for (int j = y1; j &lt;= y2; ++j)
            if (i == x1 || i == x2) putchar('*');
            else if (j == y1 || j == y2) putchar('*');
            else putchar(' ');
        putchar('\n');
    }
}
int main() {
    //freopen("data2.in", "r", stdin);
    //freopen("data2.out", "w", stdout);
    int T, ncase = 0, N;
    while (~scanf("%d", &amp;T)) {
        while (T--) {
            int x[4], y[4], minx = 100, maxx = -1, miny = 100, maxy = -1;
            int ok = 1;</algorithm></cstring></cstdio></iostream></p>

<pre><code>        scanf("%d", &amp;N);
        for (int i = 0; i &lt; N; ++i) scanf("%d %d", x+i, y+i);
        for (int i = 0; i &lt; N; ++i) {
            minx = min(minx, x[i]);
            maxx = max(maxx, x[i]);
            miny = min(miny, y[i]);
            maxy = max(maxy, y[i]);
        }
        if (minx == maxx || miny == maxy) ok = 0;
        for (int i = 0; ok &amp;&amp; i &lt; N; ++i) {
            if ((x[i] == minx || x[i] == maxx) &amp;&amp;
                (y[i] == miny || y[i] == maxy)) continue;
            ok = 0;
        }

        printf("Case #%d:\n", ++ncase);
        if (!ok) { puts("None"); continue; }
        draw(minx, miny, maxx, maxy);
    }
}
return 0; } ```
</code></pre>

<p>以上题目均为过测试数据的程序，不保证程序完全正确无误.
Thanks for reading…  </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bestcode #11 div2]]></title>
    <link href="http://www.UnkelTao.com/blog/2014/09/29/bestcode-number-11-div2/"/>
    <updated>2014-09-29T04:54:35+01:00</updated>
    <id>http://www.UnkelTao.com/blog/2014/09/29/bestcode-number-11-div2</id>
    <content type="html"><![CDATA[<p>博客还是要不定期更新下才行，表示存活。<br />
~~昨天晚上做了杭电的best coder,div2果然还是比较适合我这种弱渣的，都可以做。最后1004出题人实在太恶意了，故意卡内存，MLE到死，1002坑死了一堆人，最后hack了6个（悲催的是自己想到数据了写错了一个字母，自己最后也挂掉了）。  </p>

<p><strong>题解在下面:</strong><br />
<!-- more -->  </p>

<h3 id="httpacmhdueducnshowproblemphppid5054"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5054">1001</a></h3>
<p>签到题，没什么可说的，判断<code>2*x==n&amp;&amp;2*y==m</code>就行了  </p>

<p>```
int main(){
   //data();</p>

<p>int m,n,x,y;</p>

<p>while(~scanf(“%d%d%d%d”,&amp;n,&amp;m,&amp;x,&amp;y)){
      if(x<em>2==n&amp;&amp;y</em>2==m) cout«“YES”«endl;
      else cout«“NO”«endl;
   }
   return 0;
}
```  </p>

<h3 id="httpacmhdueducnshowproblemphppid5055"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5055">1002</a></h3>

<p><strong>题意:</strong> 给你一堆0~9的数字，让你把他们组合成一个满足条件的最大的数:  </p>

<ul>
  <li>木有前导0  </li>
  <li>最后一个必须是奇数  </li>
</ul>

<p>如果没有满足条件的，输出-1。
**解法:  ** 贪心，选一个最小的奇数放最后，然后从大到小输出剩余的数就行了，注意判断无解的情况。<br />
一些特殊数据  </p>

<blockquote>
  <p>5<br />
1 0 0 0 0<br />
out:-1<br />
1<br />
1<br />
out:1<br />
1<br />
0<br />
out:0  </p>
</blockquote>

<p>```
#define rep(i, n) for (int i=0; i&lt;(n); ++i)
void RD(int &amp;a) { 
    int value = 0, s = 1; 
    char c;
    while ((c = getchar()) == ‘ ‘ || c == ‘\n’);
    if (c == ‘-‘) s = -s; else value = c-48;
    while ((c = getchar()) &gt;= ‘0’ &amp;&amp; c &lt;= ‘9’)
        value = value * 10 + c - 48;
    a = s * value;
}
int res[10];
int main(){
   //data();</p>

<p>int n,a;
   while(~scanf(“%d”,&amp;n)){
      int fg=0,fg2=0,mi=11;
      memset(res,0,sizeof(res));
      rep(i,n){ 
         RD(a);
         if(a&amp;1){ fg++;if(mi&gt;a)mi=a;} 
         res[a]++; 
      }<br />
      if(fg==0||(n&gt;1&amp;&amp;res[0]==n-1)){printf(“-1\n”);}
      else{</p>

<pre><code>     for(int i=9;i&gt;=0;i--){
        if(i==mi) rep(j,res[i]-1)printf("%d",i);
        else rep(j,res[i]) printf("%d",i);
        
     }
     printf("%d\n",mi);
  }    }
</code></pre>

<p>return 0;
}
```  </p>

<h3 id="httpacmhdueducnshowproblemphppid5056"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5056">1003</a></h3>

<p>**题意： ** 给你一个只包含小写字母的字符串，问你相同字母不超过k个的子串有多少种。<br />
**解法:  ** 简单的dp吧对于某个i位置，找到该字母的第前k个相同字母的位置(不足k,就在起始位置)，同时维护前i-1的位置最远可以向前的位置。  </p>

<p>```
void RD(int &amp;a) { 
    int value = 0, s = 1; 
    char c;
    while ((c = getchar()) == ‘ ‘ || c == ‘\n’);
    if (c == ‘-‘) s = -s; else value = c-48;
    while ((c = getchar()) &gt;= ‘0’ &amp;&amp; c &lt;= ‘9’)
        value = value * 10 + c - 48;
    a = s * value;
}</p>

<p>int cnt[27];
vector<int> mark[26];
char str[100100];
int main(){
   //data();</int></p>

<p>int T,n,a,k;
   RD(T);</p>

<p>while(T–){
        for(int i=0;i&lt;26;i++){ mark[i].clear();cnt[i]=0;}        <br />
     scanf(“%s”,str);
     RD(k);
     int len=strlen(str);
     ll res=1LL;
     mark[str[0]-‘a’].push_back(0);
     cnt[str[0]-‘a’]++;
     int cur=-1;
     for(int i=1;i&lt;len;i++)
     {   int tp=str[i]-‘a’;</p>

<pre><code>     if(cnt[tp]&lt;k) res+=(i-cur);
     else{cur=max(cur,mark[tp][cnt[tp]-k]); res +=(i-cur);}
     //cout&lt;&lt;tp&lt;&lt;"  "&lt;&lt;cnt[tp]&lt;&lt;"  "&lt;&lt;k&lt;&lt;"   "&lt;&lt;res&lt;&lt;endl;
     cnt[tp]++;
     mark[tp].push_back(i);
 }
 cout&lt;&lt;res&lt;&lt;endl;    }
</code></pre>

<p>return 0;
}
```</p>

<h3 id="httpacmhdueducnshowproblemphppid5057"><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5057">1004</a></h3>

<p><strong>题意:</strong> 给你一串数字，两种操作  </p>

<ul>
  <li>S x y: 将第x个数变为y  </li>
  <li>Q l r d p: 查询[l,r]区间内，第d位数字为p的数有多少个。  </li>
</ul>

<p>**解法: **一开始利用树状数组开了一个C[d][p][MaxN]的数组来维护第d位为p的一个区间和，结果出题人恶意的卡内存，不断的MLE，姿势不够，怎么优化内存都不行，有人说用无符号short型，但是n最大10^6，会溢出。最后改成离线算法，只开C[p][MaxN]的数组来维护某一位为p的区间和，然后预存所有操作，跑10遍，每一遍对应一位。这样内存就很随意了。 <br />
<img src="http://unkeltao.qiniudn.com/wailian%2Fhdudiv211.png" alt="" /><br />
都是泪~</p>

<p>```
#define MaxN 110000
int  C[11][MaxN]={0};
int n,n2,m;
int read(int k,int i){
    int sum=0;
    if(k&lt;=0) return 0;
    for(;k;k-=(k&amp;-k)) sum += C[i][k];
    return sum;
}</p>

<p>void update(int k,int p,int i){
    for(;k&lt;=n;k+=(k&amp;-k)) C[i][k] += p;
}
void RD(int &amp;a) { 
    int value = 0, s = 1; 
    char c;
    while ((c = getchar()) == ‘ ‘ || c == ‘\n’);
    if (c == ‘-‘) s = -s; else value = c-48;
    while ((c = getchar()) &gt;= ‘0’ &amp;&amp; c &lt;= ‘9’)
        value = value * 10 + c - 48;
    a = s * value;
}
int CC[MaxN],A[MaxN];
int p[11];
int T,i,j,a[MaxN],b[MaxN],l[MaxN],r[MaxN],cnt[MaxN],tp1,tp2;
int ans[MaxN];
int mx[11];
char Q[3];
int main(){
   // data();</p>

<pre><code>RD(T);
p[1]=1;
for(i=2;i&lt;=10;i++) p[i]=p[i-1]*10;
while(T--){
   RD(n);
   RD(m);        

   for(i=0;i&lt;n;i++){ 
        RD(A[i]);
        //cout&lt;&lt;A[i]&lt;&lt;endl;
   }
   for(int i=0;i&lt;11;i++)mx[i]=n;
   for(i=0;i&lt;m;i++){
      scanf("%s",Q);
         if(Q[0]=='S'){
         cnt[i]=0;
           RD(a[i]);RD(b[i]);
      }else{
           RD(l[i]);RD(r[i]);RD(a[i]);RD(b[i]);cnt[i]=1;
           mx[a[i]]=i;
      }
      
   }
   
   for(int i=1;i&lt;=10;i++)
   {
         memset(C,0,sizeof(C));
         for(j=0;j&lt;n;j++){
            n2 = (A[j]/p[i])%10;
            update(j+1,1,n2);
            CC[j]=A[j];
         }   
        for(int j=0;j&lt;m;j++){
           // if(j&gt;mx[i]) break;
            if(!cnt[j]) {
                tp1=(CC[a[j]-1]/p[i])%10;
                tp2=(b[j]/p[i])%10;
                if(tp1==tp2) continue;
               {update(a[j],-1,tp1); update(a[j],1,tp2);}
               CC[a[j]-1]=b[j];
            }else if(a[j]==i){
                ans[j] = read(r[j],b[j])-read(l[j]-1,b[j]);
            }
        }
   }
   
   for(i=0;i&lt;m;i++){
      if(cnt[i])  printf("%d\n",ans[i]);
   }                            
} } ```
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces Round #237 (Div. 2) ]]></title>
    <link href="http://www.UnkelTao.com/blog/2014/03/21/codeforces-round-number-237-div-2/"/>
    <updated>2014-03-21T04:03:13+01:00</updated>
    <id>http://www.UnkelTao.com/blog/2014/03/21/codeforces-round-number-237-div-2</id>
    <content type="html"><![CDATA[<p>群中看到学第们发的比赛链接，于是又做了一场，结果悲惨。再也不在windows下做比赛了，电脑现在不知道出了啥问题，每次00：16都要自动关机。结果敲完的题没保存，又得重新敲一遍。  </p>

<h3 id="a---valera-and-xhttpcodeforcescomcontest404problema"><a href="http://codeforces.com/contest/404/problem/A">A - Valera and X</a></h3>
<p><strong>题意</strong>： 给你一个矩阵，问你是不是恰好有2种字母，对角线字母一样，非对角线字母一样。<br />
<strong>key</strong>:   模拟  </p>

<!--more-->

<p>```ruby</p>

<p>n = gets.chomp!.to_i
a = Array.new(n) </p>

<p>n.times{|i|
    a[i] = gets.chomp!
}</p>

<p>if n==1
    puts “YES”
    exit
end</p>

<p>x = a[0][0]
b = a[0][1]</p>

<p>if x == b
    puts “NO”
    exit
end<br />
n.times { |i|<br />
    n.times { |j|<br />
        if i==j || (i+j==n-1)
            if a[i][j] != x
                puts “NO”
                exit
            end
        else
             if a[i][j] != b
                puts “NO”
                exit
            end
        end
    }
}</p>

<p>puts “YES”</p>

<p>```</p>

<h2 id="b---marathonhttpcodeforcescomcontest404problemb"><a href="http://codeforces.com/contest/404/problem/B">B - Marathon</a></h2>
<p><strong>题意</strong>:  给你一个a*a的正方形，从(0,0)出发，沿边线逆时针行走，走n次，每次走d的距离，输出每次行走后的坐标。</p>

<p><strong>key</strong>:   模拟题，注意精度就好。</p>

<p>```ruby<br />
eps = 1e-5
a,d = gets.chomp!.split.map { |e|  e.to_f}
n =gets.chomp!.to_i
cur_x=0.00
cur_y=0.00
pp=0.00</p>

<p>n.times {
	if cur_y &lt;= eps
		pp = cur_x	
	elsif a-cur_x &lt;= eps
		pp = a + cur_y
	elsif a-cur_y &lt;= eps
		pp = a<em>3 -cur_x	
	else
		pp = a</em>4 -cur_y
	end	
	pp +=d;
	t= (pp/a).floor
	pp -= 1.0<em>t</em>a;
	case t%4
	when 0
		cur_x=pp
		cur_y=0
	when 1
		cur_x=a
		cur_y=pp
	when 2
		cur_x=a-pp
		cur_y=a
	when 3
		cur_x=0
		cur_y=a-pp
	end
	printf(“%.8f %.8f\n”,cur_x,cur_y)
}
```  </p>

<h2 id="c---restore-graphhttpcodeforcescomcontest404problemc"><a href="http://codeforces.com/contest/404/problem/C">C - Restore Graph</a></h2>
<p><strong>题意</strong>:  给你一个无向无子环的图，告诉你所有点到某一个选取的点的距离的矩阵d,问你能不能修复出满足条件的原图，其中一个点最多能够连接k条边。</p>

<p><strong>key</strong>:  首先d中肯定只有一个0，并且该点就是选取的点。否则肯定不存在。 对d进行排序，一条边一条边的修复模拟即可，注意满足每个点连接的边不能超过k个。 </p>

<p>```ruby</p>

<table>
  <tbody>
    <tr>
      <td>n,k = gets.chomp!.split.map {</td>
      <td>e</td>
      <td>e.to_i}</td>
    </tr>
  </tbody>
</table>

<p>D = gets.chomp!.split.map {|e| [e.to_i,0]}
flag = 0
n.times { |i| 
    D[i][1]=i+1
    if D[i][0] == 0
        flag += 1
    end
}
if flag != 1
    p -1
    exit
end</p>

<p>D.sort!
b = Array.new(2<em>n)
e = Array.new(2</em>n)
l=0
f=0
t=1
while t&lt;n 
    if f==1 
        k -= 1 
    end
    if D[t].first!= (D[f].first+1) 
        puts “-1” 
        exit 
    end
    p=k
    i = t
    while i&lt;n
        break if D[i].first!=D[t].first
        if(p==0) 
            f +=1
            p=k 
        end
        if(p==0)<br />
            puts(“-1”) 
            exit 
        end
        p -= 1
        if(f==t)<br />
            puts(“-1”) 
            exit 
        end
        b[l]=D[f][1];
        e[l]=D[i][1];
        l+=1;i+=1;
    end
    f=t;
    t=i;
end</p>

<p>p l
l.times { |i|<br />
    puts “#{b[i]} #{e[i]}”
}
```  </p>

<h2 id="d---minesweeper-1dhttpcodeforcescomcontest404problemd"><a href="http://codeforces.com/contest/404/problem/D">D - Minesweeper 1D</a></h2>
<p><strong>题意</strong>: 给你一个1<em>n的地雷图，0表示左右都没有地雷，1表示左右共有1个雷，2表示左右都是雷，</em>表示该点是雷，？表示该点未知，求有多少种合法的方案。  </p>

<p><strong>key</strong>: DP,<code>dp[i][0]表示i点是0的方案数，dp[i][1]表示i点是1的方案数，dp[i][2]表示该点是雷的方案数</code>，其中1可以转化为0，2可以转化为1。 因为“<em>1”的话后面肯定不会是雷，那么变成0的方案数，如果是”01”或“11”的话，后面肯定是雷，保持1不动，”</em>2”的话后面肯定是雷。<br />
<strong>转移方程见代码</strong>  </p>

<p>```ruby 
s = gets.chomp!
mods = 1000000007
dp = [[0,0,0],[0,0,0]]</p>

<p>len =s.size
cur =0;nxt=1;</p>

<p>dp[cur][0]=dp[cur][1]=1</p>

<p>for i in 0…len
	case s[i]
	when ‘0’
		dp[nxt][0]=dp[cur][0]
	when ‘1’
		dp[nxt][1]= dp[cur][0]
		dp[nxt][0]= dp[cur][2]
	when ‘2’
		dp[nxt][1]=dp[cur][2]
	when ‘*’
		dp[nxt][2]= (dp[cur][1]+dp[cur][2])%mods
	when ‘?’
		dp[nxt][1]= (dp[cur][2]+dp[cur][0])%mods
		dp[nxt][0]= (dp[cur][0]+dp[cur][2])%mods
		dp[nxt][2]= (dp[cur][1]+dp[cur][2])%mods
	end
	cur = nxt
	nxt = cur==0?1:0
	dp[nxt] = [0,0,0]
end</p>

<p>puts “#{(dp[cur][0]+dp[cur][2])%mods}” 
```  </p>

<h2 id="e---maze-1dhttpcodeforcescomcontest404probleme"><a href="http://codeforces.com/contest/404/problem/E">E - Maze 1D</a></h2>
<p><strong>题意</strong>: 题意真是难读,大概就是机器人会左右移动，但是如果前面的点是障碍点的话他就不会向前进忽略这次移动，问在设置最少障碍点的情况下能够使得机器人最后停下的位置是以前没有走过的。 问这样的设置方案数有多少个（在障碍点最少的情况下）。</p>

<p><strong>key</strong>: 二分+枚举。   </p>

<ul>
  <li>首先我们可以确定，如果不加障碍点他最后停留的位置只走过一次的话，那么方案数肯定是1。   </li>
  <li>最多设置一个障碍点，如果一个障碍点不能满足情况，再多的障碍点也没用。  </li>
  <li>如果i点可以是障碍点，那么<code>(0,i]</code>的点都可以是障碍点，同理-i是障碍点，<code>[-1,0)</code>都可以是障碍点。  </li>
</ul>

<p>有了这样的理解，那么遍可以2分来判断最大的i点是不是可以为障碍点了，判断方法模拟就可以了。<br />
<strong>(ruby跑的太慢，TLE了，囧RZ，C++可以AC)</strong>  </p>

<p><strong>ruby代码</strong></p>

<p>```ruby
#TLE 代码
$s = gets.chomp!
$fg = 2
$len = $s.size
$mods = $len+7
$vis = Array.new((5*$mods))
def Judge(k)</p>

<pre><code>$fg += 1
pos = $mods + 100
k += pos
$vis[pos] = $fg
$len.times { |i|  
	if $s[i].chr=='R' and pos+1 !=k
		pos += 1
		# p 111111111111
	elsif $s[i].chr=='L' and pos-1 != k
		pos -= 1
		# p 222222222222
	end
	if i==$len-1
		# puts "b:"
		# p $vis[pos]
		# p pos 
		# p $fg
		return $vis[pos] != $fg
	end
	$vis[pos] = $fg
} end
</code></pre>

<p>if Judge($mods+300)
	p 1
	exit
end</p>

<p>res = 0
l = 1
r=$len</p>

<p>if Judge(1)
	while l&lt;r
		mid = ((l+r+1)/2).floor
		if Judge(mid)
			l = mid
		else
			r =mid -1
		end
	end
	res += l
end</p>

<p>l = 1
r=$len</p>

<p>if Judge(-1)
	while l&lt;r
		mid = (l+r+1)/2
		if Judge(-1*mid)
			l = mid
		else
			r =mid -1
		end
	end
	res += l
end</p>

<p>p res
```</p>

<p><strong>c++代码</strong>  </p>

<p>```c++
char str[MaxN];
int fg=2,len;
int vis[5*MaxN];</p>

<p>bool Judge(int k){
   fg++;
   int pos=1e6+10;
   k+=pos;
   vis[pos] = fg;
   // printf(“%d %d %d\n”, fg,pos,k);
   rep(i,len){
   	  if(str[i]==’R’&amp;&amp;pos+1!=k) pos++;
   	  if(str[i]==’L’&amp;&amp;pos-1!=k) pos–;
   	  if(i==len-1){
   	  	// printf(“ans %d  %d %d\n”, vis[pos],fg,pos);
   	  	return vis[pos] != fg;
   	  }
   	  vis[pos] = fg;
   }	
}</p>

<p>int main()
{
	while(~scanf(“%s”,str)){
		len = strlen(str);
		memset(vis,0,sizeof(vis));</p>

<pre><code>	if(Judge(1e6+200)){
		printf("1\n");
		return 0;
	}

	ll res = 0;
	int l=1,r=len,mid;
	if (Judge(1))
	{
		while(l&lt;r){
			mid = (l+r+1)/2;
			if(Judge(mid)) l=mid;
			else r=mid-1;
		}
		res += l;
	}

	if (Judge(-1))
	{
		l=1,r=len,mid;
		while(l&lt;r){
			mid = (l+r+1)/2;
			if(Judge(-mid)) l=mid;
			else r=mid-1;
		}
		res += l;			
	}
	cout&lt;&lt;res&lt;&lt;endl;
}	
return 0; }
</code></pre>

<p>```</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces Round #235 (Div. 2) ]]></title>
    <link href="http://www.UnkelTao.com/blog/2014/03/11/codeforce-235/"/>
    <updated>2014-03-11T07:02:19+01:00</updated>
    <id>http://www.UnkelTao.com/blog/2014/03/11/codeforce-235</id>
    <content type="html"><![CDATA[<p>好久没做CF了，觉得再不做估计以后笔试都过不鸟，于是还得经常做一做。 </p>

<p>CF的回滚对我木有影响阿，我已经好久没做了似乎。 </p>

<p>这次的DIV2似乎比以前的简单一点。 </p>

<h2 id="a-vanya-and-cardshttpcodeforcescomcontest401problema"><a href="http://codeforces.com/contest/401/problem/A">A. Vanya and Cards</a></h2>
<p>送分,大概给你一堆数，问你最少还需要几个绝对值不超过X的数能够让他们的和为0.</p>

<p><code>ruby
n,x = gets.chomp!.split.map { |e|  e.to_i}
sum = gets.split.collect{|x| x.to_i}.inject{|y, x| y += x}
p (sum.abs + x -1)/x
</code>
<!--more--></p>

<h2 id="b-sereja-and-contestshttpcodeforcescomcontest401problemb"><a href="http://codeforces.com/contest/401/problem/B">B. Sereja and Contests</a></h2>
<p>模拟题</p>

<p>```ruby
n,k = gets.chomp!.split.map { |e|  e.to_i}
A = Array.new(n) { |i|  0}
k.times {<br />
   c,d1,d2 =  gets.chomp!.split.map { |e|  e.to_i}
   A[d1-1] = 1
   if d2 != nil
     A[d2-1] = 1
   end
}</p>

<p>mx=0
mi=0
cur=0
(n-1).times do |i|
   if A[i] == 0
        cur += 1
   else
       mx += cur
       mi += (cur+1)/2
       cur = 0<br />
   end<br />
end</p>

<p>mx += cur
mi += (cur+1)/2
puts “#{mi} #{mx}”
```</p>

<h2 id="c-teamhttpcodeforcescomcontest401problemc"><a href="http://codeforces.com/contest/401/problem/C">C. Team</a></h2>
<p>也是模拟题，给你n个1，m个0，让你给出一种排列，不能有3个1连在一起，不能有两个0连在一起，给出任意一种方案即可，不能则输出-1</p>

<p>```ruby
m,n = gets.chomp!.split.map { |e|  e.to_i}
if n+1 &lt; m 
    p -1
    exit
elsif (m+1)*2 &lt; n
    p -1
    exit
end</p>

<p>if n == m
    n.times{printf “10” }
    puts “”
elsif m == n+1
    n.times{print “01”}
    puts 0
elsif (m+1)<em>2 == n
    m.times{printf “110”}
    puts “11”
elsif m</em>2 == n
    m.times{print “110”}
    puts “”
else
    k = n - 1 - m
    (k).times {print “110”}
    (m-k).times{print “10”}
    puts “1”
end
```</p>

<h2 id="d-roman-and-numbershttpcodeforcescomcontest401problemd"><a href="http://codeforces.com/contest/401/problem/D">D. Roman and Numbers</a></h2>
<p>暴力+状态压缩。 
题意：给你一个不超过18位的数n,和不超过100的m,将n进行重排(改变里面的位置，当然0不能排在最前面)，问有多少个数是m的倍数。 
ruby似乎跑的很慢，不幸TLE的，C++可以过 </p>

<p>```ruby
n,m = gets.chomp!.split
m = m.to_i
len = n.size
dp = Array.new((1«len)+2) {Array.new(m+5,0)} 
dp[0][0] = 1</p>

<p>(1«len).times do |i|
    m.times { |j|<br />
        tp = Array.new(20,0)
        len.times{|k|
            t = n[k].chr.to_i
            if i&amp;(1«k) != 0 || (i==0 &amp;&amp; t==0) || tp[t] !=0 
                next
            end
            tp[t] = 1
            dp[i|(1«k)][(j*10+t)%m] +=dp[i][j]
        } <br />
    }
end
p dp[(1«len)-1][0]
``` </p>

<h2 id="e-olympic-gameshttpcodeforcescomcontest401probleme"><a href="http://codeforces.com/contest/401/problem/E">E. Olympic Games</a></h2>
<p>略难，暂时不会</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为Hustoj添加ruby支持]]></title>
    <link href="http://www.UnkelTao.com/blog/2014/03/02/ruby-for-hustoj/"/>
    <updated>2014-03-02T14:33:16+00:00</updated>
    <id>http://www.UnkelTao.com/blog/2014/03/02/ruby-for-hustoj</id>
    <content type="html"><![CDATA[<p>虽然已经不是再搞ACM了，但是算法偶尔还是要练习一下写代码，然后最近学习ruby中，打算用ruby来写写ACM题目也算熟悉ruby，免得不用就忘记了，记得Hustoj是可以支持Ruby的，于是就在我们学校的训练Oj上提交了A+B的Ruby代码：</p>

<p><code>ruby
readlines.each{|line|
	p line.split.collect{|x| x.to_i}.inject{|y, x| y += x}
}
</code></p>

<p>于是华丽的给了我一个WA~~~正在想怎么可能，想起来服务器上没有装ruby，于是远程到7509的服务器上再ssh到训练oj的服务器(只能内网访问，ping不到外网地址)，将ruby装上。</p>

<p>然后就开始了无止境的RE生涯，简直无情，各种call禁止：
<!--more-->
<img src="http://unkeltao.qiniudn.com/img/IMG_ruby_1.png" alt="" /></p>

<p>在hustoj的wiki页面上，终于找到了参考的添加其他<a href="http://code.google.com/p/hustoj/wiki/AddProgrammingLanguage">语言支持的方法</a></p>

<p>其实主要的就是找到所有的call编号，放到数组里面去就行了，ruby对应了两个数组</p>

<p><code>rb
#保存为Main.rb
readlines.each{|line|
	p line.split.collect{|x| x.to_i}.inject{|y, x| y += x}
</code></p>

<p>terminal中运行如下命令。</p>

<p><code>sh
strace -ff ruby Main.rb 2&gt;&amp;1|awk -F\( '{print $1}'|sort -u
</code></p>

<p>然后会产生,以access开头，write结束（也有可能是其他）的一些列标志如下：</p>

<p><code>
access
xxx
xxx
write
</code></p>

<p>把这些标志放入如下过程，结尾是0，对应RC数组其他值为-1，结尾为0.</p>

<p><code>c++
int LANG_RV[256]={SYS_access,SYS_write.....,0};
int LANG_RC[256]={-1,-1,......,0};
</code></p>

<p>改好之后切换到对应目录下，重新make</p>

<p><code>sh
cd ~/hustoj-read-only/core/
./make.sh
</code></p>

<p>接下来就是体力活了，找到提交的runid，rejudge下，看看是不是AC了，可能还会接着RE，如果RE，就将新的callid(是一个数字)加入到数组中，也就是RV数组中，RC数组值为-1就行：</p>

<p><code>sh
sudo judge_client 2028 0 /home/judge/ debug Y
</code></p>

<p>直到返回值不是10，然后再去页面提交，这下应该就可以了~~~（当然我中间还做了一堆傻事，这儿就不提了）
偶尔可以在训练oj上做做练习了，免得以后笔试说不定都跪。</p>

<p>最终结果：
<img src="http://unkeltao.qiniudn.com/img/IMG_ruby_2.png" alt="" /></p>

]]></content>
  </entry>
  
</feed>
