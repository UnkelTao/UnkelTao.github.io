<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Spring | /UnkelTao]]></title>
  <link href="http://www.UnkelTao.com/blog/categories/spring/atom.xml" rel="self"/>
  <link href="http://www.UnkelTao.com/"/>
  <updated>2014-11-16T13:23:39+00:00</updated>
  <id>http://www.UnkelTao.com/</id>
  <author>
    <name><![CDATA[UnkelTao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spring+SpringMVC+Mybatis  利用AOP自定义注解实现可配置日志快照记录]]></title>
    <link href="http://www.UnkelTao.com/blog/2014/07/22/spring-plus-springmvc-plus-mybatis-aop/"/>
    <updated>2014-07-22T10:05:38+01:00</updated>
    <id>http://www.UnkelTao.com/blog/2014/07/22/spring-plus-springmvc-plus-mybatis-aop</id>
    <content type="html"><![CDATA[<h2 id="section">目的：</h2>
<p>需要对一些事物的操作进行日志记录，如果在service内进行记录，大量的代码重复，并且维护比较麻烦。所以采用AOP的方式对service进行拦截。使用自定义注解的目的则是判断是否需要记录日志和传递额外的信息。</p>

<h2 id="section-1">方式</h2>
<p>本次解决方案十分感谢<a href="http://www.cnblogs.com/shipengzhi/articles/2716004.html">博主-跳刀的兔子的博文</a> 本文绝大部分参考与本文，略有不同，所以做一些整理，<a href="http://www.cnblogs.com/shipengzhi/articles/2716004.html">博主</a>的文章更详细一些。</p>

<!-- more -->

<h3 id="section-2">1.首先新建自定义注解</h3>
<p>```
@Target({ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
@Documented<br />
@Inherited
public @interface LogWrite {
    /**
     *@param 模块名字 
     */
    String modelName() default “”;</p>

<pre><code>/**
 *@param 操作类型 
 */
String option(); } ```  
</code></pre>

<ul>
  <li>其中@Target注解用于描述该注解的范围，我们需要注解的方法，所以值为METHOD，相关含义如下表：  </li>
</ul>

<table>
  <thead>
    <tr>
      <th>取值</th>
      <th>含义</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>CONSTRUCTOR</td>
      <td>描述构造器</td>
    </tr>
    <tr>
      <td>FIELD</td>
      <td>描述域</td>
    </tr>
    <tr>
      <td>LOCAL_VARIABLE</td>
      <td>用于描述局部变量</td>
    </tr>
    <tr>
      <td>METHOD</td>
      <td>用于描述方法</td>
    </tr>
    <tr>
      <td>PACKAGE</td>
      <td>用于描述包</td>
    </tr>
    <tr>
      <td>PARAMETER</td>
      <td>用于描述参数</td>
    </tr>
    <tr>
      <td>TYPE</td>
      <td>用于描述类或接口</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>@Retention 用于描述注解的生命周期（即：被描述的注解在什么范围内有效），其取值有：  </li>
</ul>

<table>
  <thead>
    <tr>
      <th>取值</th>
      <th>含义</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>SOURCE</td>
      <td>在源文件中有效（即源文件保留）</td>
    </tr>
    <tr>
      <td>CLASS</td>
      <td>在 class 文件中有效（即 class 保留）</td>
    </tr>
    <tr>
      <td>RUNTIME</td>
      <td>在运行时有效(即运行时保留)</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>@Documented 在默认的情况下javadoc命令不会将我们的annotation生成再doc中去的，所以使用该标记就是告诉jdk让它也将annotation生成到doc中去  </p>
  </li>
  <li>
    <p>@Inherited 比如有一个类A，在他上面有一个标记annotation，那么A的子类B是否不用再次标记annotation就可以继承得到呢，答案是肯定的  </p>
  </li>
</ul>

<h3 id="aop">2.利用AOP方式拦截</h3>
<ul>
  <li>配置AOP，我使用的是利用注解的方式来配置AOP，方法有很多，就不详细说了。</li>
  <li>使用的是@Around 环绕通知，因为需要记录该方法是否被执行成功了。</li>
  <li>实现@Around方法中，记录日志：  获取拦截的方法，判断该方法是否含有自定义注解，如果没有的则不进行记录，否则，按照自己的方式进行记录。 我主要记录的是操作的方法，所属模块，以及所有参数所构成的Json字符串。  </li>
</ul>

<p>```
@Aspect
@Component
public class SnapshotLogWriteService {
	private LogService logService;
	public LogService getLogService() {
		return logService;
	}</p>

<pre><code>//自动注入日志记录service
@Autowired
public void setLogService(LogService logService) {
	this.logService = logService;
}
//环绕通知方法
@Around("execution(* unkeltao.service.*.*(..))")
public Object doWriteLog(ProceedingJoinPoint pjp) throws Throwable {
	System.err.println("拦截方法,进入日志记录");
	// 拦截的实体类
	Object target = pjp.getTarget();
	// 拦截的方法名称
	String methodName = pjp.getSignature().getName();
	// 拦截的方法参数
	Object[] args = pjp.getArgs();
	
	// 拦截的放参数类型
	Class[] parameterTypes = ((MethodSignature) pjp.getSignature())
			.getMethod().getParameterTypes();

	Object object = null;
	
	//需要转换成Json的HashMap
	Map&lt;String, Object&gt; maps = new HashMap&lt;String, Object&gt;();
	Map&lt;String, Object&gt; parammaps = new HashMap&lt;String, Object&gt;();
	// 获得被拦截的方法
	Method method = target.getClass().getMethod(methodName, parameterTypes);
	if (null != method) {
		// 判断是否包含自定义的注解
		if (method.isAnnotationPresent(MyAnnotation.class)) {
			// 获取自定义注解实体
			MyAnnotation myAnnotation = method
					.getAnnotation(MyAnnotation.class);
			//日志类实体类
			OptionLog log = new OptionLog();
			
			log.setUserid(myAnnotation.userid());
			log.setModelname(myAnnotation.modelName());
			log.setOp(myAnnotation.option());
			maps.put("方法名", method.getName());
			parammaps.put("方法名", method.getName());
            //循环获得所有参数对象
			for(int i=0; i&lt;args.length; i++){
				if (null != args[i]) {
					parammaps.put("args["+i+"]", args[i]);
				}
				else {
					parammaps.put("args["+i+"]", "空参数");
				}
			}
			maps.put("参数", parammaps);
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
			maps.put("操作时间", sdf.format(new Date()));
			// 获取服务运行结果
			try {
				object = pjp.proceed();// 执行该方法
				maps.put("状态", "成功");
				log.setStatus(1);
			} catch (Exception e) {
				System.err.println(e.getMessage());
				maps.put("状态", "失败");
				log.setStatus(0);
				log.setComments(e.getMessage());
			}
			//将参数转化为Json字符串
			log.setJs(new JSONObject(maps).toJSONString());
			log.setOptime(new Date());
			System.err.println(new JSONObject(maps).toJSONString());  
			
			//记录相关日志
			if (null != logService) {
				try {
					if(1 == logService.Save(log)){
						System.err.println("日志记录成功");
					}
					else{
						System.err.println("日志记录失败");
					}
					
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			else{
				System.err.println("自动注入失败，日志未记录");
			}

		} else { // 没有包含该注解则不进行其他处理
			object = pjp.proceed();// 执行该方法
		}

	} else { // 不需要拦截，直接运行
		object = pjp.proceed(); // 执行该方法
	}
	return object;
} } ```
</code></pre>

<h3 id="section-3">记录结果</h3>
<p><img src="http://unkeltao.qiniudn.com/wailian/TestLog2.png" alt="记录结果" />  </p>

<h3 id="json">最终的Json效果图</h3>
<p><img src="http://unkeltao.qiniudn.com/wailian/LogTest.png" alt="效果图" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[spring+springmvc+mybatis环境搭建]]></title>
    <link href="http://www.UnkelTao.com/blog/2014/07/17/spring-plus-springmvc-plus-mybatis/"/>
    <updated>2014-07-17T14:46:31+01:00</updated>
    <id>http://www.UnkelTao.com/blog/2014/07/17/spring-plus-springmvc-plus-mybatis</id>
    <content type="html"><![CDATA[<p>学习了一下这个框架的整合，跟SSH还是有区别的，将Struts2换成了springmvc，hibernate换成了mybatis。</p>

<p>当然管理包什么的，还是Maven靠谱，IDE从MyEclipse换到了Eclipse，快了不少。不过Maven插件需要自己安装了。
<!-- more --></p>

<h2 id="section">环境搭建</h2>

<h3 id="maven">Maven</h3>

<ul>
  <li>配置: 下载Maven包配置环境变量即可，配置文件中修改库的位置等相关信息  </li>
  <li>使用： 安装Eclipse插件，将Maven安装路径配置进去  </li>
  <li>在<strong>pom.xml</strong>中加入包的配置即可。  </li>
</ul>

<blockquote>
  <pre><code>&lt;dependency&gt;  
	&lt;groupId&gt;org.springframework&lt;/groupId&gt;  
	&lt;artifactId&gt;spring-test&lt;/artifactId&gt;  
  	&lt;version&gt;3.2.0.RELEASE&lt;/version&gt;  
&lt;/dependency&gt;  
</code></pre>
</blockquote>

<ul>
  <li>其中版本号可以在<a href="http://search.maven.org/">http://search.maven.org</a> 中查询.<br />
下面是我搭建环境中所使用到的jar包  </li>
</ul>

<p>```
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemalocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelversion>4.0.0</modelversion>
	<groupid>unkeltao.testmybatis</groupid>
	<artifactid>testmybatis</artifactid>
	<packaging>war</packaging>
	<version>0.0.1-SNAPSHOT</version>
	<name>testmybatis Maven Webapp</name>
	<url>http://maven.apache.org</url></project></p>

<pre><code>&lt;dependencies&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;org.springframework&lt;/groupId&gt;
		&lt;artifactId&gt;spring-test&lt;/artifactId&gt;
		&lt;version&gt;3.2.0.RELEASE&lt;/version&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;org.springframework&lt;/groupId&gt;
		&lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;
		&lt;version&gt;3.2.0.RELEASE&lt;/version&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;org.springframework&lt;/groupId&gt;
		&lt;artifactId&gt;spring-core&lt;/artifactId&gt;
		&lt;version&gt;3.2.0.RELEASE&lt;/version&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;org.mybatis&lt;/groupId&gt;
		&lt;artifactId&gt;mybatis&lt;/artifactId&gt;
		&lt;version&gt;3.1.1&lt;/version&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;org.mybatis&lt;/groupId&gt;
		&lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;
		&lt;version&gt;1.1.1&lt;/version&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;mysql&lt;/groupId&gt;
		&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
		&lt;version&gt;5.1.21&lt;/version&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;junit&lt;/groupId&gt;
		&lt;artifactId&gt;junit&lt;/artifactId&gt;
		&lt;version&gt;4.11&lt;/version&gt;
		&lt;scope&gt;test&lt;/scope&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;com.alibaba&lt;/groupId&gt;
		&lt;artifactId&gt;druid&lt;/artifactId&gt;
		&lt;version&gt;0.2.9&lt;/version&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;org.aspectj&lt;/groupId&gt;
		&lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;
		&lt;version&gt;1.7.1&lt;/version&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;org.aspectj&lt;/groupId&gt;
		&lt;artifactId&gt;aspectjrt&lt;/artifactId&gt;
		&lt;version&gt;1.7.1&lt;/version&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt;
		&lt;artifactId&gt;jackson-mapper-asl&lt;/artifactId&gt;
		&lt;version&gt;1.9.11&lt;/version&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt;
		&lt;artifactId&gt;jackson-core-asl&lt;/artifactId&gt;
		&lt;version&gt;1.9.11&lt;/version&gt;
	&lt;/dependency&gt;

	&lt;dependency&gt;
		&lt;groupId&gt;commons-fileupload&lt;/groupId&gt;
		&lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;
		&lt;version&gt;1.2.2&lt;/version&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;javax.servlet&lt;/groupId&gt;
		&lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
		&lt;version&gt;3.0-alpha-1&lt;/version&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;log4j&lt;/groupId&gt;
		&lt;artifactId&gt;log4j&lt;/artifactId&gt;
		&lt;version&gt;1.2.17&lt;/version&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;com.alibaba&lt;/groupId&gt;
		&lt;artifactId&gt;fastjson&lt;/artifactId&gt;
		&lt;version&gt;1.1.26&lt;/version&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;jstl&lt;/groupId&gt;
		&lt;artifactId&gt;jstl&lt;/artifactId&gt;
		&lt;version&gt;1.2&lt;/version&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;taglibs&lt;/groupId&gt;
		&lt;artifactId&gt;standard&lt;/artifactId&gt;
		&lt;version&gt;1.1.2&lt;/version&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;cglib&lt;/groupId&gt;
		&lt;artifactId&gt;cglib-nodep&lt;/artifactId&gt;
		&lt;version&gt;3.1&lt;/version&gt;
	&lt;/dependency&gt;
&lt;/dependencies&gt;
&lt;build&gt;
&lt;/build&gt;
</code></pre>
<p>&lt;/project&gt;
```</p>

<h3 id="xml">相关xml配置</h3>

<h4 id="springxml-spring">spring.xml 用来配置spring</h4>

<p><code>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
		&lt;beans xmlns="http://www.springframework.org/schema/beans" 
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
		xmlns:aop="http://www.springframework.org/schema/aop"      
		xmlns:context="http://www.springframework.org/schema/context" 
		xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"
&gt;
	&lt;!-- 启动对@AspectJ注解的支持 --&gt;
    &lt;aop:aspectj-autoproxy/&gt;
	&lt;!-- 引入属性文件 --&gt;
	&lt;context:property-placeholder location="classpath:config.properties" /&gt;
	&lt;!-- 自动扫描(自动注入) --&gt;
	&lt;context:component-scan base-package="unkeltao.service" /&gt;
&lt;/beans&gt;  
</code></p>

<h4 id="spring-mvcxml-springmvc">spring-mvc.xml 配置springmvc,用不到的可以删掉</h4>

<p><code>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
http://www.springframework.org/schema/context 
http://www.springframework.org/schema/context/spring-context-3.0.xsd 
http://www.springframework.org/schema/mvc 
http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"&gt;
	&lt;!-- 自动扫描controller包下的所有类，使其认为spring mvc的控制器 --&gt;
	&lt;context:component-scan base-package="unkeltao.controller" /&gt;
	&lt;!-- 避免IE执行AJAX时,返回JSON出现下载文件 --&gt;
	&lt;bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"&gt;
		&lt;property name="supportedMediaTypes"&gt;
			&lt;list&gt;
				&lt;value&gt;application/json;charset=UTF-8&lt;/value&gt;
			&lt;/list&gt;
		&lt;/property&gt;
	&lt;/bean&gt;
	&lt;!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 --&gt;
	&lt;bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"&gt;
		&lt;property name="messageConverters"&gt;
			&lt;list&gt;
				&lt;ref bean="mappingJacksonHttpMessageConverter" /&gt;&lt;!-- json转换器 --&gt;
			&lt;/list&gt;
		&lt;/property&gt;
	&lt;/bean&gt;
	&lt;!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 --&gt;
	&lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:prefix="/" p:suffix=".jsp" /&gt;
	&lt;bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"&gt;
		&lt;property name="defaultEncoding"&gt;
			&lt;value&gt;UTF-8&lt;/value&gt;
		&lt;/property&gt;
		&lt;property name="maxUploadSize"&gt;
			&lt;value&gt;32505856&lt;/value&gt;&lt;!-- 上传文件大小限制为31M，31*1024*1024 --&gt;
		&lt;/property&gt;
		&lt;property name="maxInMemorySize"&gt;
			&lt;value&gt;4096&lt;/value&gt;
		&lt;/property&gt;
	&lt;/bean&gt;
&lt;/beans&gt;
</code></p>

<h4 id="spring-mybatisxmlmybatis">spring-mybatis.xml,里面为mybatis的一些配置</h4>

<p><code>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop" xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
http://www.springframework.org/schema/tx 
http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
http://www.springframework.org/schema/aop 
http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"
&gt;
	&lt;!-- JNDI方式配置数据源 --&gt;
	&lt;!-- &lt;bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"&gt; &lt;property name="jndiName" value="${jndiName}"&gt;&lt;/property&gt; &lt;/bean&gt; --&gt;
	&lt;!-- 配置数据源 --&gt;
	&lt;bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"&gt;
		&lt;property name="url" value="${jdbc_url}" /&gt;
		&lt;property name="username" value="${jdbc_username}" /&gt;
		&lt;property name="password" value="${jdbc_password}" /&gt;
		&lt;!-- 初始化连接大小 --&gt;
		&lt;property name="initialSize" value="0" /&gt;
		&lt;!-- 连接池最大使用连接数量 --&gt;
		&lt;property name="maxActive" value="20" /&gt;
		&lt;!-- 连接池最大空闲 --&gt;
		&lt;property name="maxIdle" value="20" /&gt;
		&lt;!-- 连接池最小空闲 --&gt;
		&lt;property name="minIdle" value="0" /&gt;
		&lt;!-- 获取连接最大等待时间 --&gt;
		&lt;property name="maxWait" value="60000" /&gt;
		&lt;!-- &lt;property name="poolPreparedStatements" value="true" /&gt; &lt;property name="maxPoolPreparedStatementPerConnectionSize" value="33" /&gt; --&gt;
		&lt;property name="validationQuery" value="${validationQuery}" /&gt;
		&lt;property name="testOnBorrow" value="false" /&gt;
		&lt;property name="testOnReturn" value="false" /&gt;
		&lt;property name="testWhileIdle" value="true" /&gt;
		&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;
		&lt;property name="timeBetweenEvictionRunsMillis" value="60000" /&gt;
		&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;
		&lt;property name="minEvictableIdleTimeMillis" value="25200000" /&gt;
		&lt;!-- 打开removeAbandoned功能 --&gt;
		&lt;property name="removeAbandoned" value="true" /&gt;
		&lt;!-- 1800秒，也就是30分钟 --&gt;
		&lt;property name="removeAbandonedTimeout" value="1800" /&gt;
		&lt;!-- 关闭abanded连接时输出错误日志 --&gt;
		&lt;property name="logAbandoned" value="true" /&gt;
		&lt;!-- 监控数据库 --&gt;
		&lt;!-- &lt;property name="filters" value="stat" /&gt; --&gt;
		&lt;property name="filters" value="mergeStat" /&gt;
	&lt;/bean&gt;
	&lt;!-- myBatis文件 --&gt;
	&lt;bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"&gt;
		&lt;property name="dataSource" ref="dataSource" /&gt;
		&lt;!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 --&gt;
		&lt;property name="mapperLocations" value="classpath:unkeltao/mapping/*.xml" /&gt;
	&lt;/bean&gt;
	&lt;bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"&gt;
		&lt;property name="basePackage" value="unkeltao.dao" /&gt;
		&lt;property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" /&gt;
	&lt;/bean&gt;
	&lt;!-- 配置事务管理器 --&gt;
	&lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt;
		&lt;property name="dataSource" ref="dataSource" /&gt;
	&lt;/bean&gt;
	&lt;!-- 注解方式配置事物 --&gt;
	&lt;!-- &lt;tx:annotation-driven transaction-manager="transactionManager" /&gt; --&gt;
	&lt;!-- 拦截器方式配置事物 --&gt;
	&lt;tx:advice id="transactionAdvice" transaction-manager="transactionManager"&gt;
		&lt;tx:attributes&gt;
			&lt;tx:method name="add*" propagation="REQUIRED" /&gt;
			&lt;tx:method name="append*" propagation="REQUIRED" /&gt;
			&lt;tx:method name="insert*" propagation="REQUIRED" /&gt;
			&lt;tx:method name="save*" propagation="REQUIRED" /&gt;
			&lt;tx:method name="update*" propagation="REQUIRED" /&gt;
			&lt;tx:method name="modify*" propagation="REQUIRED" /&gt;
			&lt;tx:method name="edit*" propagation="REQUIRED" /&gt;
			&lt;tx:method name="delete*" propagation="REQUIRED" /&gt;
			&lt;tx:method name="remove*" propagation="REQUIRED" /&gt;
			&lt;tx:method name="repair" propagation="REQUIRED" /&gt;
			&lt;tx:method name="delAndRepair" propagation="REQUIRED" /&gt;
			&lt;tx:method name="get*" propagation="SUPPORTS" /&gt;
			&lt;tx:method name="find*" propagation="SUPPORTS" /&gt;
			&lt;tx:method name="load*" propagation="SUPPORTS" /&gt;
			&lt;tx:method name="search*" propagation="SUPPORTS" /&gt;
			&lt;tx:method name="datagrid*" propagation="SUPPORTS" /&gt;
			&lt;tx:method name="*" propagation="SUPPORTS" /&gt;
		&lt;/tx:attributes&gt;
	&lt;/tx:advice&gt;
	&lt;aop:config&gt;
		&lt;aop:pointcut id="transactionPointcut" expression="execution(* unkeltao.service..*Impl.*(..))" /&gt;
		&lt;aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" /&gt;
	&lt;/aop:config&gt;
	&lt;!-- 配置druid监控spring jdbc --&gt;
	&lt;bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"&gt;
	&lt;/bean&gt;
	&lt;bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype"&gt;
		&lt;property name="patterns"&gt;
			&lt;list&gt;
				&lt;value&gt;unkeltao.service.*&lt;/value&gt;
			&lt;/list&gt;
		&lt;/property&gt;
	&lt;/bean&gt;
	&lt;aop:config&gt;
		&lt;aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" /&gt;
	&lt;/aop:config&gt;
&lt;/beans&gt;
</code>  </p>

<p>其中使用到了数据库的一些配置信息，可以直接写进去，但也可以从配置中读取，配置文件config.propertiew,里面写着一些相关的配置，在xml中就可以导入就可以了.</p>

<p><code>
#hibernate.dialect=org.hibernate.dialect.OracleDialect
#driverClassName=oracle.jdbc.driver.OracleDriver
#validationQuery=SELECT 1 FROM DUAL
#jdbc_url=jdbc:oracle:thin:@localhost:1521:orcl
#jdbc_username=sypro
#jdbc_password=sypro
hibernate.dialect=org.hibernate.dialect.MySQLDialect
driverClassName=com.mysql.jdbc.Driver
validationQuery=SELECT 1
jdbc_url=jdbc:mysql://localhost:3306/demo?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull
jdbc_username=root
jdbc_password=1qazwsx
#hibernate.dialect=org.hibernate.dialect.SQLServerDialect
#driverClassName=net.sourceforge.jtds.jdbc.Driver
#validationQuery=SELECT 1
#jdbc_url=jdbc:jtds:sqlserver://127.0.0.1:1433/sy
#jdbc_username=sa
#jdbc_password=123456
#hibernate.dialect=org.hibernate.dialect.DerbyDialect
#driverClassName=org.apache.derby.jdbc.EmbeddedDriver
#validationQuery=SELECT 1
#jdbc_url=jdbc:derby:sy;create=true
#jdbc_username=sypro
#jdbc_password=sypro
#jndiName=java:comp/env/dataSourceName
hibernate.hbm2ddl.auto=update
hibernate.show_sql=false
hibernate.format_sql=true
sessionInfoName=sessionInfo
uploadFieldName=filedata
uploadFileMaxSize=20971520
uploadFileExts=txt,rar,zip,doc,docx,xls,xlsx,jpg,jpeg,gif,png,swf,wmv,avi,wma,mp3,mid
uploadDirectory=attached
</code>  </p>

<p>这样配置就算完成了。。。可以做做简单的测试</p>

]]></content>
  </entry>
  
</feed>
